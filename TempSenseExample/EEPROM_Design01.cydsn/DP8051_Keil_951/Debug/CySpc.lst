C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYSPC
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CySpc.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\
                    -DP8051_Keil_951\Debug/CySpc.lst) CD OT(3,SPEED) OJ(.\DP8051_Keil_951\Debug\CySpc.obj)

line level    source

*** WARNING C500 IN LINE 1 OF .\Generated_Source\PSoC3\CySpc.c: INCORRECT LICENSE ID CODE (LIC) IN 'TOOLS.INI'
   1          /*******************************************************************************
   2          * File Name: CySpc.c
   3          * Version 5.30
   4          *
   5          *  Description:
   6          *   Provides an API for the System Performance Component.
   7          *   The SPC functions are not meant to be called directly by the user
   8          *   application.
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "CySpc.h"
  18          
  19          #define CY_SPC_KEY_ONE                      (0xB6u)
  20          #define CY_SPC_KEY_TWO(x)                   ((uint8) (((uint16) 0xD3u) + ((uint16) (x))))
  21          
  22          /* Command Codes */
  23          #define CY_SPC_CMD_LD_BYTE                  (0x00u)
  24          #define CY_SPC_CMD_LD_MULTI_BYTE            (0x01u)
  25          #define CY_SPC_CMD_LD_ROW                   (0x02u)
  26          #define CY_SPC_CMD_RD_BYTE                  (0x03u)
  27          #define CY_SPC_CMD_RD_MULTI_BYTE            (0x04u)
  28          #define CY_SPC_CMD_WR_ROW                   (0x05u)
  29          #define CY_SPC_CMD_WR_USER_NVL              (0x06u)
  30          #define CY_SPC_CMD_PRG_ROW                  (0x07u)
  31          #define CY_SPC_CMD_ER_SECTOR                (0x08u)
  32          #define CY_SPC_CMD_ER_ALL                   (0x09u)
  33          #define CY_SPC_CMD_RD_HIDDEN                (0x0Au)
  34          #define CY_SPC_CMD_PRG_PROTECT              (0x0Bu)
  35          #define CY_SPC_CMD_CHECKSUM                 (0x0Cu)
  36          #define CY_SPC_CMD_DWNLD_ALGORITHM          (0x0Du)
  37          #define CY_SPC_CMD_GET_TEMP                 (0x0Eu)
  38          #define CY_SPC_CMD_GET_ADC                  (0x0Fu)
  39          #define CY_SPC_CMD_RD_NVL_VOLATILE          (0x10u)
  40          #define CY_SPC_CMD_SETUP_TS                 (0x11u)
  41          #define CY_SPC_CMD_DISABLE_TS               (0x12u)
  42          #define CY_SPC_CMD_ER_ROW                   (0x13u)
  43          
  44          /* Enable bit in Active and Alternate Active mode templates */
  45          #define PM_SPC_PM_EN                        (0x08u)
  46          
  47          /* Gate calls to the SPC. */
  48          uint8 SpcLockState = CY_SPC_UNLOCKED;
  49          
  50          
  51          #if(CY_PSOC5)
              
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 2   

                  /***************************************************************************
                  * The wait-state pipeline must be enabled prior to accessing the SPC
                  * register interface regardless of CPU frequency. The CySpcLock() saves
                  * current wait-state pipeline state and enables it. The CySpcUnlock()
                  * function, which must be called after SPC transaction, restores original
                  * state.
                  ***************************************************************************/
                  static uint32 spcWaitPipeBypass = 0u;
              
              #endif  /* (CY_PSOC5) */
  63          
  64          
  65          /*******************************************************************************
  66          * Function Name: CySpcStart
  67          ********************************************************************************
  68          * Summary:
  69          *  Starts the SPC.
  70          *
  71          * Parameters:
  72          *  None
  73          *
  74          * Return:
  75          *  None
  76          *
  77          *******************************************************************************/
  78          void CySpcStart(void) 
  79          {
  80   1          /* Save current global interrupt enable and disable it */
  81   1          uint8 interruptState = CyEnterCriticalSection();
  82   1      
  83   1          CY_SPC_PM_ACT_REG  |= PM_SPC_PM_EN;
  84   1          CY_SPC_PM_STBY_REG |= PM_SPC_PM_EN;
  85   1      
  86   1          /* Restore global interrupt enable state */
  87   1          CyExitCriticalSection(interruptState);
  88   1      }
  89          
  90          
  91          /*******************************************************************************
  92          * Function Name: CySpcStop
  93          ********************************************************************************
  94          * Summary:
  95          *  Stops the SPC.
  96          *
  97          * Parameters:
  98          *  None
  99          *
 100          * Return:
 101          *  None
 102          *
 103          *******************************************************************************/
 104          void CySpcStop(void) 
 105          {
 106   1          /* Save current global interrupt enable and disable it */
 107   1          uint8 interruptState = CyEnterCriticalSection();
 108   1      
 109   1          CY_SPC_PM_ACT_REG  &= ((uint8)(~PM_SPC_PM_EN));
 110   1          CY_SPC_PM_STBY_REG &= ((uint8)(~PM_SPC_PM_EN));
 111   1      
 112   1          /* Restore global interrupt enable state */
 113   1          CyExitCriticalSection(interruptState);
 114   1      }
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 3   

 115          
 116          
 117          /*******************************************************************************
 118          * Function Name: CySpcReadData
 119          ********************************************************************************
 120          * Summary:
 121          *  Reads data from the SPC.
 122          *
 123          * Parameters:
 124          *  uint8 buffer:
 125          *   Address to store data read.
 126          *
 127          *  uint8 size:
 128          *   Number of bytes to read from the SPC.
 129          *
 130          * Return:
 131          *  uint8:
 132          *   The number of bytes read from the SPC.
 133          *
 134          *******************************************************************************/
 135          uint8 CySpcReadData(uint8 buffer[], uint8 size) 
 136          {
 137   1          uint8 i;
 138   1      
 139   1          for(i = 0u; i < size; i++)
 140   1          {
 141   2              while(!CY_SPC_DATA_READY)
 142   2              {
 143   3                  CyDelayUs(1u);
 144   3              }
 145   2              buffer[i] = CY_SPC_CPU_DATA_REG;
 146   2          }
 147   1      
 148   1          return(i);
 149   1      }
 150          
 151          
 152          /*******************************************************************************
 153          * Function Name: CySpcLoadMultiByte
 154          ********************************************************************************
 155          * Summary:
 156          *  Loads 1 to 32 bytes of data into the row latch of a Flash/EEPROM array.
 157          *
 158          * Parameters:
 159          *  uint8 array:
 160          *   Id of the array.
 161          *
 162          *  uint16 address:
 163          *   Flash/eeprom addrress
 164          *
 165          *  uint8* buffer:
 166          *   Data to load to the row latch
 167          *
 168          *  uint16 number:
 169          *   Number bytes to load.
 170          *
 171          * Return:
 172          *  CYRET_STARTED
 173          *  CYRET_CANCELED
 174          *  CYRET_LOCKED
 175          *  CYRET_BAD_PARAM
 176          *
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 4   

 177          *******************************************************************************/
 178          cystatus CySpcLoadMultiByte(uint8 array, uint16 address, const uint8 buffer[], uint8 size)\
 179          
 180          {
 181   1          cystatus status = CYRET_STARTED;
 182   1          uint8 i;
 183   1      
 184   1          /***************************************************************************
 185   1          * Check if number is correct for array. Number must be less than
 186   1          * 32 for Flash or less than 16 for EEPROM.
 187   1          ***************************************************************************/
 188   1          if(((array < CY_SPC_LAST_FLASH_ARRAYID) && (size < 32u)) ||
 189   1             ((array > CY_SPC_LAST_FLASH_ARRAYID) && (size < 16u)))
 190   1          {
 191   2              if(CY_SPC_IDLE)
 192   2              {
 193   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 194   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_MULTI_BYTE);
 195   3                  CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_MULTI_BYTE;
 196   3      
 197   3                  if(CY_SPC_BUSY)
 198   3                  {
 199   4                      CY_SPC_CPU_DATA_REG = array;
 200   4                      CY_SPC_CPU_DATA_REG = 1u & HI8(address);
 201   4                      CY_SPC_CPU_DATA_REG = LO8(address);
 202   4                      CY_SPC_CPU_DATA_REG = ((uint8)(size - 1u));
 203   4      
 204   4                      for(i = 0u; i < size; i++)
 205   4                      {
 206   5                          CY_SPC_CPU_DATA_REG = buffer[i];
 207   5                      }
 208   4                  }
 209   3                  else
 210   3                  {
 211   4                      status = CYRET_CANCELED;
 212   4                  }
 213   3              }
 214   2              else
 215   2              {
 216   3                  status = CYRET_LOCKED;
 217   3              }
 218   2          }
 219   1          else
 220   1          {
 221   2              status = CYRET_BAD_PARAM;
 222   2          }
 223   1      
 224   1          return(status);
 225   1      }
 226          
 227          
 228          /*******************************************************************************
 229          * Function Name: CySpcLoadRow
 230          ********************************************************************************
 231          * Summary:
 232          *  Loads a row of data into the row latch of a Flash/EEPROM array.
 233          *
 234          *  The buffer pointer should point to the data that should be written to the
 235          *  flash row directly (no data in ECC/flash will be preserved). It is Flash API
 236          *  responsibility to prepare data: the preserved data are copied from flash into
 237          *  array with the modified data.
 238          *
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 5   

 239          * Parameters:
 240          *  uint8 array:
 241          *   Id of the array.
 242          *
 243          *  uint8* buffer:
 244          *   Data to be loaded to the row latch
 245          *
 246          *  uint8 size:
 247          *   The number of data bytes that the SPC expects to be written. Depends on the
 248          *   type of the array and, if the array is Flash, whether ECC is being enabled
 249          *   or not. There are following values: flash row latch size with ECC enabled,
 250          *   flash row latch size with ECC disabled and EEPROM row latch size.
 251          *
 252          * Return:
 253          *  CYRET_STARTED
 254          *  CYRET_CANCELED
 255          *  CYRET_LOCKED
 256          *
 257          *******************************************************************************/
 258          cystatus CySpcLoadRow(uint8 array, const uint8 buffer[], uint16 size)
 259          {
 260   1          cystatus status = CYRET_STARTED;
 261   1          uint16 i;
 262   1      
 263   1          /* Make sure the SPC is ready to accept command */
 264   1          if(CY_SPC_IDLE)
 265   1          {
 266   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 267   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_ROW);
 268   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_ROW;
 269   2      
 270   2              /* Make sure the command was accepted */
 271   2              if(CY_SPC_BUSY)
 272   2              {
 273   3                  CY_SPC_CPU_DATA_REG = array;
 274   3      
 275   3                  for(i = 0u; i < size; i++)
 276   3                  {
 277   4                      CY_SPC_CPU_DATA_REG = buffer[i];
 278   4                  }
 279   3              }
 280   2              else
 281   2              {
 282   3                  status = CYRET_CANCELED;
 283   3              }
 284   2          }
 285   1          else
 286   1          {
 287   2              status = CYRET_LOCKED;
 288   2          }
 289   1      
 290   1          return(status);
 291   1      }
 292          
 293          
 294          /*******************************************************************************
 295          * Function Name: CySpcLoadRowFull
 296          ********************************************************************************
 297          * Summary:
 298          *  Loads a row of data into the row latch of a Flash/EEPROM array.
 299          *
 300          *  The only data that are going to be changed should be passed. The function
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 6   

 301          *  will handle unmodified data preservation based on DWR settings and input
 302          *  parameters.
 303          *
 304          * Parameters:
 305          *  uint8 array:
 306          *   Id of the array.
 307          *
 308          *  uint16 row:
 309          *   Flash row number to be loaded.
 310          *
 311          *  uint8* buffer:
 312          *   Data to be loaded to the row latch
 313          *
 314          *  uint8 size:
 315          *   The number of data bytes that the SPC expects to be written. Depends on the
 316          *   type of the array and, if the array is Flash, whether ECC is being enabled
 317          *   or not. There are following values: flash row latch size with ECC enabled,
 318          *   flash row latch size with ECC disabled and EEPROM row latch size.
 319          *
 320          * Return:
 321          *  CYRET_STARTED
 322          *  CYRET_CANCELED
 323          *  CYRET_LOCKED
 324          *
 325          *******************************************************************************/
 326          cystatus CySpcLoadRowFull(uint8 array, uint16 row, const uint8 buffer[], uint16 size)\
 327          
 328          {
 329   1          cystatus status = CYRET_STARTED;
 330   1          uint16 i;
 331   1      
 332   1          #if (CYDEV_ECC_ENABLE == 0)
 333   1              uint32 offset;
 334   1          #endif /* (CYDEV_ECC_ENABLE == 0) */
 335   1      
 336   1          /* Make sure the SPC is ready to accept command */
 337   1          if(CY_SPC_IDLE)
 338   1          {
 339   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 340   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_ROW);
 341   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_ROW;
 342   2      
 343   2              /* Make sure the command was accepted */
 344   2              if(CY_SPC_BUSY)
 345   2              {
 346   3                  CY_SPC_CPU_DATA_REG = array;
 347   3      
 348   3                  /*******************************************************************
 349   3                  * If "Enable Error Correcting Code (ECC)" and "Store Configuration
 350   3                  * Data in ECC" DWR options are disabled, ECC section is available
 351   3                  * for user data.
 352   3                  *******************************************************************/
 353   3                  #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
              
                              /*******************************************************************
                              * If size parameter equals size of the ECC row and selected array
                              * identification corresponds to the flash array (but not to EEPROM
                              * array) then data are going to be written to the ECC section.
                              * In this case flash data must be preserved. The flash data copied
                              * from flash data section to the SPC data register.
                              *******************************************************************/
                              if ((size == CYDEV_ECC_ROW_SIZE) && (array <= CY_SPC_LAST_FLASH_ARRAYID))
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 7   

                              {
                                  offset = CYDEV_FLS_BASE +
                                           ((uint32) array * CYDEV_FLS_SECTOR_SIZE) +
                                           ((uint32)   row * CYDEV_FLS_ROW_SIZE   );
              
                                  for (i = 0u; i < CYDEV_FLS_ROW_SIZE; i++)
                                  {
                                      CY_SPC_CPU_DATA_REG = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
                                  }
                              }
              
                          #endif /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 375   3      
 376   3      
 377   3                  for(i = 0u; i < size; i++)
 378   3                  {
 379   4                      CY_SPC_CPU_DATA_REG = buffer[i];
 380   4                  }
 381   3      
 382   3      
 383   3                  /*******************************************************************
 384   3                  * If "Enable Error Correcting Code (ECC)" DWR option is disabled,
 385   3                  * ECC section can be used for storing device configuration data
 386   3                  * ("Store Configuration Data in ECC" DWR option is enabled) or for
 387   3                  * storing user data in the ECC section ("Store Configuration Data in
 388   3                  * ECC" DWR option is enabled). In both cases, the data in the ECC
 389   3                  * section must be preserved if flash data is written.
 390   3                  *******************************************************************/
 391   3                  #if (CYDEV_ECC_ENABLE == 0)
 392   3      
 393   3      
 394   3                      /*******************************************************************
 395   3                      * If size parameter equals size of the flash row and selected array
 396   3                      * identification corresponds to the flash array (but not to EEPROM
 397   3                      * array) then data are going to be written to the flash data
 398   3                      * section. In this case, ECC section data must be preserved.
 399   3                      * The ECC section data copied from ECC section to the SPC data
 400   3                      * register.
 401   3                      *******************************************************************/
 402   3                      if ((size == CYDEV_FLS_ROW_SIZE) && (array <= CY_SPC_LAST_FLASH_ARRAYID))
 403   3                      {
 404   4                          offset = CYDEV_ECC_BASE +
 405   4                                  ((uint32) array * CYDEV_ECC_SECTOR_SIZE) +
 406   4                                  ((uint32) row   * CYDEV_ECC_ROW_SIZE   );
 407   4      
 408   4                          for (i = 0u; i < CYDEV_ECC_ROW_SIZE; i++)
 409   4                          {
 410   5                              CY_SPC_CPU_DATA_REG = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
 411   5                          }
 412   4                      }
 413   3      
 414   3                  #else
              
                              if(0u != row)
                              {
                                  /* To remove unreferenced local variable warning */
                              }
              
                          #endif /* (CYDEV_ECC_ENABLE == 0) */
 422   3              }
 423   2              else
 424   2              {
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 8   

 425   3                  status = CYRET_CANCELED;
 426   3              }
 427   2          }
 428   1          else
 429   1          {
 430   2              status = CYRET_LOCKED;
 431   2          }
 432   1      
 433   1          return(status);
 434   1      }
 435          
 436          
 437          /*******************************************************************************
 438          * Function Name: CySpcWriteRow
 439          ********************************************************************************
 440          * Summary:
 441          *  Erases then programs a row in Flash/EEPROM with data in row latch.
 442          *
 443          * Parameters:
 444          *  uint8 array:
 445          *   Id of the array.
 446          *
 447          *  uint16 address:
 448          *   flash/eeprom addrress
 449          *
 450          *  uint8 tempPolarity:
 451          *   temperature polarity.
 452          *   1: the Temp Magnitude is interpreted as a positive value
 453          *   0: the Temp Magnitude is interpreted as a negative value
 454          *
 455          *  uint8 tempMagnitude:
 456          *   temperature magnitude.
 457          *
 458          * Return:
 459          *  CYRET_STARTED
 460          *  CYRET_CANCELED
 461          *  CYRET_LOCKED
 462          *
 463          *******************************************************************************/
 464          cystatus CySpcWriteRow(uint8 array, uint16 address, uint8 tempPolarity, uint8 tempMagnitude)\
 465          
 466          {
 467   1          cystatus status = CYRET_STARTED;
 468   1      
 469   1          /* Make sure the SPC is ready to accept command */
 470   1          if(CY_SPC_IDLE)
 471   1          {
 472   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 473   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_WR_ROW);
 474   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_WR_ROW;
 475   2      
 476   2              /* Make sure the command was accepted */
 477   2              if(CY_SPC_BUSY)
 478   2              {
 479   3                  CY_SPC_CPU_DATA_REG = array;
 480   3                  CY_SPC_CPU_DATA_REG = HI8(address);
 481   3                  CY_SPC_CPU_DATA_REG = LO8(address);
 482   3                  CY_SPC_CPU_DATA_REG = tempPolarity;
 483   3                  CY_SPC_CPU_DATA_REG = tempMagnitude;
 484   3              }
 485   2              else
 486   2              {
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 9   

 487   3                  status = CYRET_CANCELED;
 488   3              }
 489   2          }
 490   1          else
 491   1          {
 492   2              status = CYRET_LOCKED;
 493   2          }
 494   1      
 495   1          return(status);
 496   1      }
 497          
 498          
 499          /*******************************************************************************
 500          * Function Name: CySpcEraseSector
 501          ********************************************************************************
 502          * Summary:
 503          *  Erases all data in the addressed sector (block of 64 rows).
 504          *
 505          * Parameters:
 506          *  uint8 array:
 507          *   Id of the array.
 508          *
 509          *  uint8 sectorNumber:
 510          *   Zero based sector number within Flash/EEPROM array
 511          *
 512          * Return:
 513          *  CYRET_STARTED
 514          *  CYRET_CANCELED
 515          *  CYRET_LOCKED
 516          *
 517          *******************************************************************************/
 518          cystatus CySpcEraseSector(uint8 array, uint8 sectorNumber)
 519          {
 520   1          cystatus status = CYRET_STARTED;
 521   1      
 522   1          /* Make sure the SPC is ready to accept command */
 523   1          if(CY_SPC_IDLE)
 524   1          {
 525   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 526   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_ER_SECTOR);
 527   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_ER_SECTOR;
 528   2      
 529   2              /* Make sure the command was accepted */
 530   2              if(CY_SPC_BUSY)
 531   2              {
 532   3                  CY_SPC_CPU_DATA_REG = array;
 533   3                  CY_SPC_CPU_DATA_REG = sectorNumber;
 534   3              }
 535   2              else
 536   2              {
 537   3                  status = CYRET_CANCELED;
 538   3              }
 539   2          }
 540   1          else
 541   1          {
 542   2              status = CYRET_LOCKED;
 543   2          }
 544   1      
 545   1          return(status);
 546   1      }
 547          
 548          
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 10  

 549          /*******************************************************************************
 550          * Function Name: CySpcGetTemp
 551          ********************************************************************************
 552          * Summary:
 553          *  Returns the internal die temperature
 554          *
 555          * Parameters:
 556          *  uint8 numSamples:
 557          *   Number of samples. Valid values are 1-5, resulting in 2 - 32 samples
 558          *   respectively.
 559          *
 560          * uint16 timerPeriod:
 561          *   Number of ADC ACLK cycles. A valid 14 bit value is accepted, higher 2 bits
 562          *   of 16 bit values are ignored.
 563          *
 564          * uint8 clkDivSelect:
 565          *   ADC ACLK clock divide value. Valid values are 2 - 225.
 566          *
 567          * Return:
 568          *  CYRET_STARTED
 569          *  CYRET_CANCELED
 570          *  CYRET_LOCKED
 571          *
 572          *******************************************************************************/
 573          cystatus CySpcGetTemp(uint8 numSamples)
 574          {
 575   1          cystatus status = CYRET_STARTED;
 576   1      
 577   1          /* Make sure the SPC is ready to accept command */
 578   1          if(CY_SPC_IDLE)
 579   1          {
 580   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 581   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_GET_TEMP);
 582   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_GET_TEMP;
 583   2      
 584   2              /* Make sure the command was accepted */
 585   2              if(CY_SPC_BUSY)
 586   2              {
 587   3                  CY_SPC_CPU_DATA_REG = numSamples;
 588   3              }
 589   2              else
 590   2              {
 591   3                  status = CYRET_CANCELED;
 592   3              }
 593   2          }
 594   1          else
 595   1          {
 596   2              status = CYRET_LOCKED;
 597   2          }
 598   1      
 599   1          return(status);
 600   1      }
 601          
 602          
 603          /*******************************************************************************
 604          * Function Name: CySpcLock
 605          ********************************************************************************
 606          * Summary:
 607          *  Locks the SPC so it can not be used by someone else:
 608          *   - Saves wait-pipeline enable state and enable pipeline (PSoC5)
 609          *
 610          * Parameters:
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 11  

 611          *  Note
 612          *
 613          * Return:
 614          *  CYRET_SUCCESS - if the resource was free.
 615          *  CYRET_LOCKED  - if the SPC is in use.
 616          *
 617          *******************************************************************************/
 618          cystatus CySpcLock(void)
 619          {
 620   1          cystatus status = CYRET_LOCKED;
 621   1          uint8 interruptState;
 622   1      
 623   1          /* Enter critical section */
 624   1          interruptState = CyEnterCriticalSection();
 625   1      
 626   1          if(CY_SPC_UNLOCKED == SpcLockState)
 627   1          {
 628   2              SpcLockState = CY_SPC_LOCKED;
 629   2              status = CYRET_SUCCESS;
 630   2      
 631   2              #if(CY_PSOC5)
              
                          if(0u != (CY_SPC_CPU_WAITPIPE_REG & CY_SPC_CPU_WAITPIPE_BYPASS))
                          {
                              /* Enable pipeline registers */
                              CY_SPC_CPU_WAITPIPE_REG &= ((uint32)(~CY_SPC_CPU_WAITPIPE_BYPASS));
              
                              /* At least 2 NOP instructions are recommended */
                              CY_NOP;
                              CY_NOP;
                              CY_NOP;
              
                              spcWaitPipeBypass = CY_SPC_CPU_WAITPIPE_BYPASS;
                          }
              
                      #endif  /* (CY_PSOC5) */
 647   2          }
 648   1      
 649   1          /* Exit critical section */
 650   1          CyExitCriticalSection(interruptState);
 651   1      
 652   1          return(status);
 653   1      }
 654          
 655          
 656          /*******************************************************************************
 657          * Function Name: CySpcUnlock
 658          ********************************************************************************
 659          * Summary:
 660          *  Unlocks the SPC so it can be used by someone else:
 661          *   - Restores wait-pipeline enable state (PSoC5)
 662          *
 663          * Parameters:
 664          *  None
 665          *
 666          * Return:
 667          *  None
 668          *
 669          *******************************************************************************/
 670          void CySpcUnlock(void)
 671          {
 672   1          uint8 interruptState;
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 12  

 673   1      
 674   1          /* Enter critical section */
 675   1          interruptState = CyEnterCriticalSection();
 676   1      
 677   1          /* Release the SPC object */
 678   1          SpcLockState = CY_SPC_UNLOCKED;
 679   1      
 680   1          #if(CY_PSOC5)
              
                      if(CY_SPC_CPU_WAITPIPE_BYPASS == spcWaitPipeBypass)
                      {
                          /* Force to bypass pipeline registers */
                          CY_SPC_CPU_WAITPIPE_REG |= CY_SPC_CPU_WAITPIPE_BYPASS;
              
                          /* At least 2 NOP instructions are recommended */
                          CY_NOP;
                          CY_NOP;
                          CY_NOP;
              
                          spcWaitPipeBypass = 0u;
                      }
              
                  #endif  /* (CY_PSOC5) */
 696   1      
 697   1          /* Exit critical section */
 698   1          CyExitCriticalSection(interruptState);
 699   1      }
 700          
 701          
 702          /*******************************************************************************
 703          * Function Name: CySpcGetAlgorithm
 704          ********************************************************************************
 705          * Summary:
 706          *  Downloads SPC algorithm from SPC SROM into SRAM.
 707          *
 708          * Parameters:
 709          *  None
 710          *
 711          * Return:
 712          *  CYRET_STARTED
 713          *  CYRET_LOCKED
 714          *
 715          *******************************************************************************/
 716          cystatus CySpcGetAlgorithm(void)
 717          {
 718   1          cystatus status = CYRET_STARTED;
 719   1      
 720   1          /* Make sure the SPC is ready to accept command */
 721   1          if(CY_SPC_IDLE)
 722   1          {
 723   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 724   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_DWNLD_ALGORITHM);
 725   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_DWNLD_ALGORITHM;
 726   2          }
 727   1          else
 728   1          {
 729   2              status = CYRET_LOCKED;
 730   2          }
 731   1      
 732   1          return(status);
 733   1      }
 734          
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 13  

 735          /* [] END OF FILE */
 736          
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CySpcStart (BEGIN)
                                           ; SOURCE LINE # 78
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 81
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0008 9043A0            MOV     DPTR,#043A0H
000B E0                MOVX    A,@DPTR
000C 4408              ORL     A,#08H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
000F 9043B0            MOV     DPTR,#043B0H
0012 E0                MOVX    A,@DPTR
0013 4408              ORL     A,#08H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
0016 900000      R     MOV     DPTR,#interruptState
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 88
001E 22                RET     
             ; FUNCTION CySpcStart (END)

             ; FUNCTION CySpcStop (BEGIN)
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 107
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
0008 9043A0            MOV     DPTR,#043A0H
000B E0                MOVX    A,@DPTR
000C 54F7              ANL     A,#0F7H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
000F 9043B0            MOV     DPTR,#043B0H
0012 E0                MOVX    A,@DPTR
0013 54F7              ANL     A,#0F7H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
0016 900000      R     MOV     DPTR,#interruptState
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 114
001E 22                RET     
             ; FUNCTION CySpcStop (END)

             ; FUNCTION _CySpcReadData (BEGIN)
                                           ; SOURCE LINE # 135
0000 900000      R     MOV     DPTR,#buffer
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 15  

0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 139
000E E4                CLR     A
000F A3                INC     DPTR
0010 F0                MOVX    @DPTR,A
0011         ?C0003:
0011 900000      R     MOV     DPTR,#size
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 A3                INC     DPTR
0017 E0                MOVX    A,@DPTR
0018 C3                CLR     C
0019 9F                SUBB    A,R7
001A 503E              JNC     ?C0004
                                           ; SOURCE LINE # 140
001C         ?C0006:
                                           ; SOURCE LINE # 141
001C 904722            MOV     DPTR,#04722H
001F E0                MOVX    A,@DPTR
0020 5401              ANL     A,#01H
0022 6003              JZ      ?C0008
0024 D3                SETB    C
0025 8001              SJMP    ?C0009
0027         ?C0008:
0027 C3                CLR     C
0028         ?C0009:
0028 4009              JC      ?C0007
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
002A 7F01              MOV     R7,#01H
002C 7E00              MOV     R6,#00H
002E 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 144
0031 80E9              SJMP    ?C0006
0033         ?C0007:
                                           ; SOURCE LINE # 145
0033 904720            MOV     DPTR,#04720H
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#buffer
003B E0                MOVX    A,@DPTR
003C FB                MOV     R3,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F FA                MOV     R2,A
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 F9                MOV     R1,A
0043 900000      R     MOV     DPTR,#i
0046 E0                MOVX    A,@DPTR
0047 FE                MOV     R6,A
0048 E9                MOV     A,R1
0049 2E                ADD     A,R6
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 16  

004A F9                MOV     R1,A
004B E4                CLR     A
004C 3A                ADDC    A,R2
004D FA                MOV     R2,A
004E EF                MOV     A,R7
004F 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 146
0052 900000      R     MOV     DPTR,#i
0055 E0                MOVX    A,@DPTR
0056 04                INC     A
0057 F0                MOVX    @DPTR,A
0058 80B7              SJMP    ?C0003
005A         ?C0004:
                                           ; SOURCE LINE # 148
005A 900000      R     MOV     DPTR,#i
005D E0                MOVX    A,@DPTR
005E FF                MOV     R7,A
                                           ; SOURCE LINE # 149
005F         ?C0010:
005F 22                RET     
             ; FUNCTION _CySpcReadData (END)

             ; FUNCTION _CySpcLoadMultiByte (BEGIN)
                                           ; SOURCE LINE # 178
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EA                MOV     A,R2
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E9                MOV     A,R1
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
0014 900000      R     MOV     DPTR,#status
0017 7407              MOV     A,#07H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 188
001A 900000      R     MOV     DPTR,#array
001D E0                MOVX    A,@DPTR
001E C3                CLR     C
001F 943F              SUBB    A,#03FH
0021 5009              JNC     ?C0013
0023 900000      R     MOV     DPTR,#size
0026 E0                MOVX    A,@DPTR
0027 C3                CLR     C
0028 9420              SUBB    A,#020H
002A 4017              JC      ?C0012
002C         ?C0013:
002C 900000      R     MOV     DPTR,#array
002F E0                MOVX    A,@DPTR
0030 D3                SETB    C
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 17  

0031 943F              SUBB    A,#03FH
0033 5003              JNC     $ + 5H
0035 020000      R     LJMP    ?C0011
0038 900000      R     MOV     DPTR,#size
003B E0                MOVX    A,@DPTR
003C 9410              SUBB    A,#010H
003E 4003              JC      $ + 5H
0040 020000      R     LJMP    ?C0011
0043         ?C0012:
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
0043 904722            MOV     DPTR,#04722H
0046 E0                MOVX    A,@DPTR
0047 5402              ANL     A,#02H
0049 607C              JZ      ?C0014
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
004B 904720            MOV     DPTR,#04720H
004E 74B6              MOV     A,#0B6H
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
0051 74D4              MOV     A,#0D4H
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
0054 7401              MOV     A,#01H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 197
0057 904722            MOV     DPTR,#04722H
005A E0                MOVX    A,@DPTR
005B 5402              ANL     A,#02H
005D 7060              JNZ     ?C0015
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
005F 900000      R     MOV     DPTR,#array
0062 E0                MOVX    A,@DPTR
0063 904720            MOV     DPTR,#04720H
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0067 900000      R     MOV     DPTR,#address
006A E0                MOVX    A,@DPTR
006B FE                MOV     R6,A
006C A3                INC     DPTR
006D E0                MOVX    A,@DPTR
006E EE                MOV     A,R6
006F 5401              ANL     A,#01H
0071 904720            MOV     DPTR,#04720H
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
0075 900000      R     MOV     DPTR,#address
0078 E0                MOVX    A,@DPTR
0079 A3                INC     DPTR
007A E0                MOVX    A,@DPTR
007B 904720            MOV     DPTR,#04720H
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
007F 900000      R     MOV     DPTR,#size
0082 E0                MOVX    A,@DPTR
0083 14                DEC     A
0084 904720            MOV     DPTR,#04720H
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0088 E4                CLR     A
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 18  

0089 900000      R     MOV     DPTR,#i
008C F0                MOVX    @DPTR,A
008D         ?C0016:
008D 900000      R     MOV     DPTR,#size
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 900000      R     MOV     DPTR,#i
0095 E0                MOVX    A,@DPTR
0096 C3                CLR     C
0097 9F                SUBB    A,R7
0098 503B              JNC     ?C0021
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 206
009A 900000      R     MOV     DPTR,#buffer
009D E0                MOVX    A,@DPTR
009E FB                MOV     R3,A
009F A3                INC     DPTR
00A0 E0                MOVX    A,@DPTR
00A1 FA                MOV     R2,A
00A2 A3                INC     DPTR
00A3 E0                MOVX    A,@DPTR
00A4 F9                MOV     R1,A
00A5 900000      R     MOV     DPTR,#i
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA E9                MOV     A,R1
00AB 2F                ADD     A,R7
00AC F9                MOV     R1,A
00AD E4                CLR     A
00AE 3A                ADDC    A,R2
00AF FA                MOV     R2,A
00B0 120000      E     LCALL   ?C?CLDPTR
00B3 904720            MOV     DPTR,#04720H
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 207
00B7 900000      R     MOV     DPTR,#i
00BA E0                MOVX    A,@DPTR
00BB 04                INC     A
00BC F0                MOVX    @DPTR,A
00BD 80CE              SJMP    ?C0016
                                           ; SOURCE LINE # 208
00BF         ?C0015:
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
00BF 900000      R     MOV     DPTR,#status
00C2 7409              MOV     A,#09H
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
00C5 800E              SJMP    ?C0021
00C7         ?C0014:
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
00C7 900000      R     MOV     DPTR,#status
00CA 7404              MOV     A,#04H
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
                                           ; SOURCE LINE # 218
00CD 8006              SJMP    ?C0021
00CF         ?C0011:
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 19  

00CF 900000      R     MOV     DPTR,#status
00D2 7401              MOV     A,#01H
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
00D5         ?C0021:
                                           ; SOURCE LINE # 224
00D5 900000      R     MOV     DPTR,#status
00D8 E0                MOVX    A,@DPTR
00D9 FF                MOV     R7,A
                                           ; SOURCE LINE # 225
00DA         ?C0022:
00DA 22                RET     
             ; FUNCTION _CySpcLoadMultiByte (END)

             ; FUNCTION _CySpcLoadRow (BEGIN)
                                           ; SOURCE LINE # 258
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EA                MOV     A,R2
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C E9                MOV     A,R1
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
000E 900000      R     MOV     DPTR,#status
0011 7407              MOV     A,#07H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 264
0014 904722            MOV     DPTR,#04722H
0017 E0                MOVX    A,@DPTR
0018 5402              ANL     A,#02H
001A 6070              JZ      ?C0023
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
001C 904720            MOV     DPTR,#04720H
001F 74B6              MOV     A,#0B6H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
0022 74D5              MOV     A,#0D5H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
0025 7402              MOV     A,#02H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 271
0028 904722            MOV     DPTR,#04722H
002B E0                MOVX    A,@DPTR
002C 5402              ANL     A,#02H
002E 7054              JNZ     ?C0024
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
0030 900000      R     MOV     DPTR,#array
0033 E0                MOVX    A,@DPTR
0034 904720            MOV     DPTR,#04720H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 275
0038 E4                CLR     A
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 20  

0039 900000      R     MOV     DPTR,#i
003C F0                MOVX    @DPTR,A
003D A3                INC     DPTR
003E F0                MOVX    @DPTR,A
003F         ?C0025:
003F 900000      R     MOV     DPTR,#size
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 900000      R     MOV     DPTR,#i
004A E0                MOVX    A,@DPTR
004B FC                MOV     R4,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E C3                CLR     C
004F 9F                SUBB    A,R7
0050 EC                MOV     A,R4
0051 9E                SUBB    A,R6
0052 503E              JNC     ?C0029
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
0054 900000      R     MOV     DPTR,#buffer
0057 E0                MOVX    A,@DPTR
0058 FB                MOV     R3,A
0059 A3                INC     DPTR
005A E0                MOVX    A,@DPTR
005B FA                MOV     R2,A
005C A3                INC     DPTR
005D E0                MOVX    A,@DPTR
005E F9                MOV     R1,A
005F 900000      R     MOV     DPTR,#i
0062 E0                MOVX    A,@DPTR
0063 FE                MOV     R6,A
0064 A3                INC     DPTR
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
0067 E9                MOV     A,R1
0068 2F                ADD     A,R7
0069 F9                MOV     R1,A
006A EA                MOV     A,R2
006B 3E                ADDC    A,R6
006C FA                MOV     R2,A
006D 120000      E     LCALL   ?C?CLDPTR
0070 904720            MOV     DPTR,#04720H
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
0074 900000      R     MOV     DPTR,#i+01H
0077 E0                MOVX    A,@DPTR
0078 04                INC     A
0079 F0                MOVX    @DPTR,A
007A 7006              JNZ     ?C0064
007C 900000      R     MOV     DPTR,#i
007F E0                MOVX    A,@DPTR
0080 04                INC     A
0081 F0                MOVX    @DPTR,A
0082         ?C0064:
0082 80BB              SJMP    ?C0025
                                           ; SOURCE LINE # 279
0084         ?C0024:
                                           ; SOURCE LINE # 281
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 21  

                                           ; SOURCE LINE # 282
0084 900000      R     MOV     DPTR,#status
0087 7409              MOV     A,#09H
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
008A 8006              SJMP    ?C0029
008C         ?C0023:
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
008C 900000      R     MOV     DPTR,#status
008F 7404              MOV     A,#04H
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 288
0092         ?C0029:
                                           ; SOURCE LINE # 290
0092 900000      R     MOV     DPTR,#status
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
                                           ; SOURCE LINE # 291
0097         ?C0030:
0097 22                RET     
             ; FUNCTION _CySpcLoadRow (END)

             ; FUNCTION _CySpcLoadRowFull (BEGIN)
                                           ; SOURCE LINE # 326
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EA                MOV     A,R2
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 E9                MOV     A,R1
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
0014 900000      R     MOV     DPTR,#status
0017 7407              MOV     A,#07H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 337
001A 904722            MOV     DPTR,#04722H
001D E0                MOVX    A,@DPTR
001E 5402              ANL     A,#02H
0020 7003              JNZ     $ + 5H
0022 020000      R     LJMP    ?C0031
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
0025 904720            MOV     DPTR,#04720H
0028 74B6              MOV     A,#0B6H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 340
002B 74D5              MOV     A,#0D5H
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 22  

002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 341
002E 7402              MOV     A,#02H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 344
0031 904722            MOV     DPTR,#04722H
0034 E0                MOVX    A,@DPTR
0035 5402              ANL     A,#02H
0037 6003              JZ      $ + 5H
0039 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
003C 900000      R     MOV     DPTR,#array
003F E0                MOVX    A,@DPTR
0040 904720            MOV     DPTR,#04720H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
0044 E4                CLR     A
0045 900000      R     MOV     DPTR,#i
0048 F0                MOVX    @DPTR,A
0049 A3                INC     DPTR
004A F0                MOVX    @DPTR,A
004B         ?C0033:
004B 900000      R     MOV     DPTR,#size
004E E0                MOVX    A,@DPTR
004F FE                MOV     R6,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 900000      R     MOV     DPTR,#i
0056 E0                MOVX    A,@DPTR
0057 FC                MOV     R4,A
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
005A C3                CLR     C
005B 9F                SUBB    A,R7
005C EC                MOV     A,R4
005D 9E                SUBB    A,R6
005E 5030              JNC     ?C0034
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 379
0060 900000      R     MOV     DPTR,#buffer
0063 E0                MOVX    A,@DPTR
0064 FB                MOV     R3,A
0065 A3                INC     DPTR
0066 E0                MOVX    A,@DPTR
0067 FA                MOV     R2,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A F9                MOV     R1,A
006B 900000      R     MOV     DPTR,#i
006E E0                MOVX    A,@DPTR
006F FE                MOV     R6,A
0070 A3                INC     DPTR
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
0073 E9                MOV     A,R1
0074 2F                ADD     A,R7
0075 F9                MOV     R1,A
0076 EA                MOV     A,R2
0077 3E                ADDC    A,R6
0078 FA                MOV     R2,A
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 23  

0079 120000      E     LCALL   ?C?CLDPTR
007C 904720            MOV     DPTR,#04720H
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
0080 900000      R     MOV     DPTR,#i+01H
0083 E0                MOVX    A,@DPTR
0084 04                INC     A
0085 F0                MOVX    @DPTR,A
0086 7006              JNZ     ?C0065
0088 900000      R     MOV     DPTR,#i
008B E0                MOVX    A,@DPTR
008C 04                INC     A
008D F0                MOVX    @DPTR,A
008E         ?C0065:
008E 80BB              SJMP    ?C0033
0090         ?C0034:
                                           ; SOURCE LINE # 402
0090 900000      R     MOV     DPTR,#size
0093 E0                MOVX    A,@DPTR
0094 FE                MOV     R6,A
0095 A3                INC     DPTR
0096 E0                MOVX    A,@DPTR
0097 7003              JNZ     ?C0066
0099 EE                MOV     A,R6
009A 6401              XRL     A,#01H
009C         ?C0066:
009C 6003              JZ      $ + 5H
009E 020000      R     LJMP    ?C0041
00A1 900000      R     MOV     DPTR,#array
00A4 E0                MOVX    A,@DPTR
00A5 D3                SETB    C
00A6 943F              SUBB    A,#03FH
00A8 4003              JC      $ + 5H
00AA 020000      R     LJMP    ?C0041
                                           ; SOURCE LINE # 403
                                           ; SOURCE LINE # 406
00AD E0                MOVX    A,@DPTR
00AE FF                MOV     R7,A
00AF 7E00              MOV     R6,#00H
00B1 7C20              MOV     R4,#020H
00B3 7D00              MOV     R5,#00H
00B5 120000      E     LCALL   ?C?LIMUL
00B8 E4                CLR     A
00B9 2F                ADD     A,R7
00BA FF                MOV     R7,A
00BB E4                CLR     A
00BC 3E                ADDC    A,R6
00BD FE                MOV     R6,A
00BE ED                MOV     A,R5
00BF 3408              ADDC    A,#08H
00C1 FD                MOV     R5,A
00C2 E4                CLR     A
00C3 3C                ADDC    A,R4
00C4 FC                MOV     R4,A
00C5 C004              PUSH    AR4
00C7 C005              PUSH    AR5
00C9 C006              PUSH    AR6
00CB C007              PUSH    AR7
00CD A3                INC     DPTR
00CE E0                MOVX    A,@DPTR
00CF FE                MOV     R6,A
00D0 A3                INC     DPTR
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 24  

00D1 E0                MOVX    A,@DPTR
00D2 FF                MOV     R7,A
00D3 7C00              MOV     R4,#00H
00D5 7D20              MOV     R5,#020H
00D7 120000      E     LCALL   ?C?LIMUL
00DA A804              MOV     R0,AR4
00DC A905              MOV     R1,AR5
00DE AA06              MOV     R2,AR6
00E0 AB07              MOV     R3,AR7
00E2 D007              POP     AR7
00E4 D006              POP     AR6
00E6 D005              POP     AR5
00E8 D004              POP     AR4
00EA EB                MOV     A,R3
00EB 2F                ADD     A,R7
00EC FF                MOV     R7,A
00ED EA                MOV     A,R2
00EE 3E                ADDC    A,R6
00EF FE                MOV     R6,A
00F0 E9                MOV     A,R1
00F1 3D                ADDC    A,R5
00F2 FD                MOV     R5,A
00F3 E8                MOV     A,R0
00F4 3C                ADDC    A,R4
00F5 FC                MOV     R4,A
00F6 900000      R     MOV     DPTR,#offset
00F9 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 408
00FC E4                CLR     A
00FD 900000      R     MOV     DPTR,#i
0100 F0                MOVX    @DPTR,A
0101 A3                INC     DPTR
0102 F0                MOVX    @DPTR,A
0103         ?C0037:
0103 900000      R     MOV     DPTR,#i
0106 E0                MOVX    A,@DPTR
0107 FE                MOV     R6,A
0108 A3                INC     DPTR
0109 E0                MOVX    A,@DPTR
010A C3                CLR     C
010B 9420              SUBB    A,#020H
010D EE                MOV     A,R6
010E 9400              SUBB    A,#00H
0110 504B              JNC     ?C0041
                                           ; SOURCE LINE # 409
                                           ; SOURCE LINE # 410
0112 900000      R     MOV     DPTR,#i
0115 E0                MOVX    A,@DPTR
0116 A3                INC     DPTR
0117 E0                MOVX    A,@DPTR
0118 FF                MOV     R7,A
0119 E4                CLR     A
011A A3                INC     DPTR
011B E0                MOVX    A,@DPTR
011C F8                MOV     R0,A
011D A3                INC     DPTR
011E E0                MOVX    A,@DPTR
011F F9                MOV     R1,A
0120 A3                INC     DPTR
0121 E0                MOVX    A,@DPTR
0122 FA                MOV     R2,A
0123 A3                INC     DPTR
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 25  

0124 E0                MOVX    A,@DPTR
0125 FB                MOV     R3,A
0126 EF                MOV     A,R7
0127 2B                ADD     A,R3
0128 FF                MOV     R7,A
0129 EE                MOV     A,R6
012A 3A                ADDC    A,R2
012B FE                MOV     R6,A
012C E4                CLR     A
012D 39                ADDC    A,R1
012E FD                MOV     R5,A
012F E4                CLR     A
0130 38                ADDC    A,R0
0131 A907              MOV     R1,AR7
0133 AA06              MOV     R2,AR6
0135 AB05              MOV     R3,AR5
0137 120000      E     LCALL   _cyread8
013A 904720            MOV     DPTR,#04720H
013D EF                MOV     A,R7
013E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
013F 900000      R     MOV     DPTR,#i+01H
0142 E0                MOVX    A,@DPTR
0143 04                INC     A
0144 F0                MOVX    @DPTR,A
0145 7006              JNZ     ?C0067
0147 900000      R     MOV     DPTR,#i
014A E0                MOVX    A,@DPTR
014B 04                INC     A
014C F0                MOVX    @DPTR,A
014D         ?C0067:
014D 80B4              SJMP    ?C0037
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 422
014F         ?C0032:
                                           ; SOURCE LINE # 424
                                           ; SOURCE LINE # 425
014F 900000      R     MOV     DPTR,#status
0152 7409              MOV     A,#09H
0154 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
0155 8006              SJMP    ?C0041
0157         ?C0031:
                                           ; SOURCE LINE # 429
                                           ; SOURCE LINE # 430
0157 900000      R     MOV     DPTR,#status
015A 7404              MOV     A,#04H
015C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 431
015D         ?C0041:
                                           ; SOURCE LINE # 433
015D 900000      R     MOV     DPTR,#status
0160 E0                MOVX    A,@DPTR
0161 FF                MOV     R7,A
                                           ; SOURCE LINE # 434
0162         ?C0042:
0162 22                RET     
             ; FUNCTION _CySpcLoadRowFull (END)

             ; FUNCTION _CySpcWriteRow (BEGIN)
                                           ; SOURCE LINE # 464
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 26  

0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 466
                                           ; SOURCE LINE # 467
000E 900000      R     MOV     DPTR,#status
0011 7407              MOV     A,#07H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
0014 904722            MOV     DPTR,#04722H
0017 E0                MOVX    A,@DPTR
0018 5402              ANL     A,#02H
001A 604C              JZ      ?C0043
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 472
001C 904720            MOV     DPTR,#04720H
001F 74B6              MOV     A,#0B6H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
0022 74D8              MOV     A,#0D8H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
0025 7405              MOV     A,#05H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
0028 904722            MOV     DPTR,#04722H
002B E0                MOVX    A,@DPTR
002C 5402              ANL     A,#02H
002E 7030              JNZ     ?C0044
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
0030 900000      R     MOV     DPTR,#array
0033 E0                MOVX    A,@DPTR
0034 904720            MOV     DPTR,#04720H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 480
0038 900000      R     MOV     DPTR,#address
003B E0                MOVX    A,@DPTR
003C FE                MOV     R6,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F EE                MOV     A,R6
0040 904720            MOV     DPTR,#04720H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
0044 900000      R     MOV     DPTR,#address
0047 E0                MOVX    A,@DPTR
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A 904720            MOV     DPTR,#04720H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 482
004E 900000      R     MOV     DPTR,#tempPolarity
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 27  

0051 E0                MOVX    A,@DPTR
0052 904720            MOV     DPTR,#04720H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
0056 900000      R     MOV     DPTR,#tempMagnitude
0059 E0                MOVX    A,@DPTR
005A 904720            MOV     DPTR,#04720H
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 484
005E 800E              SJMP    ?C0046
0060         ?C0044:
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
0060 900000      R     MOV     DPTR,#status
0063 7409              MOV     A,#09H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
0066 8006              SJMP    ?C0046
0068         ?C0043:
                                           ; SOURCE LINE # 491
                                           ; SOURCE LINE # 492
0068 900000      R     MOV     DPTR,#status
006B 7404              MOV     A,#04H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
006E         ?C0046:
                                           ; SOURCE LINE # 495
006E 900000      R     MOV     DPTR,#status
0071 E0                MOVX    A,@DPTR
0072 FF                MOV     R7,A
                                           ; SOURCE LINE # 496
0073         ?C0047:
0073 22                RET     
             ; FUNCTION _CySpcWriteRow (END)

             ; FUNCTION _CySpcEraseSector (BEGIN)
                                           ; SOURCE LINE # 518
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 519
                                           ; SOURCE LINE # 520
0008 A3                INC     DPTR
0009 7407              MOV     A,#07H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 523
000C 904722            MOV     DPTR,#04722H
000F E0                MOVX    A,@DPTR
0010 5402              ANL     A,#02H
0012 602E              JZ      ?C0048
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 525
0014 904720            MOV     DPTR,#04720H
0017 74B6              MOV     A,#0B6H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
001A 74DB              MOV     A,#0DBH
001C F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 28  

                                           ; SOURCE LINE # 527
001D 7408              MOV     A,#08H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
0020 904722            MOV     DPTR,#04722H
0023 E0                MOVX    A,@DPTR
0024 5402              ANL     A,#02H
0026 7012              JNZ     ?C0049
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
0028 900000      R     MOV     DPTR,#array
002B E0                MOVX    A,@DPTR
002C 904720            MOV     DPTR,#04720H
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
0030 900000      R     MOV     DPTR,#sectorNumber
0033 E0                MOVX    A,@DPTR
0034 904720            MOV     DPTR,#04720H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 534
0038 800E              SJMP    ?C0051
003A         ?C0049:
                                           ; SOURCE LINE # 536
                                           ; SOURCE LINE # 537
003A 900000      R     MOV     DPTR,#status
003D 7409              MOV     A,#09H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
0040 8006              SJMP    ?C0051
0042         ?C0048:
                                           ; SOURCE LINE # 541
                                           ; SOURCE LINE # 542
0042 900000      R     MOV     DPTR,#status
0045 7404              MOV     A,#04H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 543
0048         ?C0051:
                                           ; SOURCE LINE # 545
0048 900000      R     MOV     DPTR,#status
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
                                           ; SOURCE LINE # 546
004D         ?C0052:
004D 22                RET     
             ; FUNCTION _CySpcEraseSector (END)

             ; FUNCTION _CySpcGetTemp (BEGIN)
                                           ; SOURCE LINE # 573
0000 900000      R     MOV     DPTR,#numSamples
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
                                           ; SOURCE LINE # 575
0005 A3                INC     DPTR
0006 7407              MOV     A,#07H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 578
0009 904722            MOV     DPTR,#04722H
000C E0                MOVX    A,@DPTR
000D 5402              ANL     A,#02H
000F 6026              JZ      ?C0053
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 29  

                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
0011 904720            MOV     DPTR,#04720H
0014 74B6              MOV     A,#0B6H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 581
0017 74E1              MOV     A,#0E1H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
001A 740E              MOV     A,#0EH
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
001D 904722            MOV     DPTR,#04722H
0020 E0                MOVX    A,@DPTR
0021 5402              ANL     A,#02H
0023 700A              JNZ     ?C0054
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
0025 900000      R     MOV     DPTR,#numSamples
0028 E0                MOVX    A,@DPTR
0029 904720            MOV     DPTR,#04720H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
002D 800E              SJMP    ?C0056
002F         ?C0054:
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 591
002F 900000      R     MOV     DPTR,#status
0032 7409              MOV     A,#09H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
0035 8006              SJMP    ?C0056
0037         ?C0053:
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
0037 900000      R     MOV     DPTR,#status
003A 7404              MOV     A,#04H
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
003D         ?C0056:
                                           ; SOURCE LINE # 599
003D 900000      R     MOV     DPTR,#status
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
                                           ; SOURCE LINE # 600
0042         ?C0057:
0042 22                RET     
             ; FUNCTION _CySpcGetTemp (END)

             ; FUNCTION CySpcLock (BEGIN)
                                           ; SOURCE LINE # 618
                                           ; SOURCE LINE # 619
                                           ; SOURCE LINE # 620
0000 900000      R     MOV     DPTR,#status
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 624
0006 120000      E     LCALL   CyEnterCriticalSection
0009 900000      R     MOV     DPTR,#interruptState
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 30  

                                           ; SOURCE LINE # 626
000E 900000      R     MOV     DPTR,#SpcLockState
0011 E0                MOVX    A,@DPTR
0012 7007              JNZ     ?C0058
                                           ; SOURCE LINE # 627
                                           ; SOURCE LINE # 628
0014 04                INC     A
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 629
0016 E4                CLR     A
0017 900000      R     MOV     DPTR,#status
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 647
001B         ?C0058:
                                           ; SOURCE LINE # 650
001B 900000      R     MOV     DPTR,#interruptState
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 652
0023 900000      R     MOV     DPTR,#status
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
                                           ; SOURCE LINE # 653
0028         ?C0059:
0028 22                RET     
             ; FUNCTION CySpcLock (END)

             ; FUNCTION CySpcUnlock (BEGIN)
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
                                           ; SOURCE LINE # 675
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 678
0008 E4                CLR     A
0009 900000      R     MOV     DPTR,#SpcLockState
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 698
000D 900000      R     MOV     DPTR,#interruptState
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 699
0015 22                RET     
             ; FUNCTION CySpcUnlock (END)

             ; FUNCTION CySpcGetAlgorithm (BEGIN)
                                           ; SOURCE LINE # 716
                                           ; SOURCE LINE # 717
                                           ; SOURCE LINE # 718
0000 900000      R     MOV     DPTR,#status
0003 7407              MOV     A,#07H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 721
0006 904722            MOV     DPTR,#04722H
0009 E0                MOVX    A,@DPTR
000A 5402              ANL     A,#02H
000C 600E              JZ      ?C0061
                                           ; SOURCE LINE # 722
C51 COMPILER V9.51   CYSPC                                                                 10/31/2016 12:08:36 PAGE 31  

                                           ; SOURCE LINE # 723
000E 904720            MOV     DPTR,#04720H
0011 74B6              MOV     A,#0B6H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
0014 74E0              MOV     A,#0E0H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 725
0017 740D              MOV     A,#0DH
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 726
001A 8006              SJMP    ?C0062
001C         ?C0061:
                                           ; SOURCE LINE # 728
                                           ; SOURCE LINE # 729
001C 900000      R     MOV     DPTR,#status
001F 7404              MOV     A,#04H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 730
0022         ?C0062:
                                           ; SOURCE LINE # 732
0022 900000      R     MOV     DPTR,#status
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
                                           ; SOURCE LINE # 733
0027         ?C0063:
0027 22                RET     
             ; FUNCTION CySpcGetAlgorithm (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1248    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      1      55
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
