C51 COMPILER V9.51   MAIN                                                                  10/31/2016 12:08:32 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\main.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP8051_Keil_951\Debug/ma
                    -in.lst) CD OT(3,SPEED) OJ(.\DP8051_Keil_951\Debug\main.obj)

line level    source

*** WARNING C500 IN LINE 1 OF .\main.c: INCORRECT LICENSE ID CODE (LIC) IN 'TOOLS.INI'
   1          /*******************************************************************************
   2          * File Name: main.c
   3          *
   4          * Version: 1.20
   5          *
   6          * Description:
   7          *  This example project demonstrates the usage of the EEPROM component. It
   8          *  includes blocking and non-blocking APIs for reading, writing, and erasing the
   9          *  EEPROM memory.
  10          *
  11          ********************************************************************************
  12          * Copyright 2012-2015, Cypress Semiconductor Corporation. All rights reserved.
  13          * This software is owned by Cypress Semiconductor Corporation and is protected
  14          * by and subject to worldwide patent and copyright laws and treaties.
  15          * Therefore, you may use this software only as provided in the license agreement
  16          * accompanying the software package from which you obtained this software.
  17          * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  18          * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  19          * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  20          *******************************************************************************/
  21          #include <project.h>
  22          
  23          /* Project defines and macro */
  24          #define USED_EEPROM_SECTOR          (1u)
  25          #define RESET_COUNTER_BYTE          ((USED_EEPROM_SECTOR * CYDEV_EEPROM_SECTOR_SIZE) + 0x00)
  26          #define ERASE_COUNTER_BYTE          ((USED_EEPROM_SECTOR * CYDEV_EEPROM_SECTOR_SIZE) + 0x01)
  27          
  28          #define LED_ON                      (1u)
  29          #define LED_OFF                     (0u)
  30          
  31          #define DEBOUNCE_DELAY_MS           (100u)
  32          
  33          
  34          /* Function prototypes */
  35          void LCD_PlaceString(uint8 row, uint8 column, char8 const string[]);
  36          void handleLed(void);
  37          
  38          
  39          /*******************************************************************************
  40          * Function Name: main
  41          ********************************************************************************
  42          *
  43          * Summary:
  44          * The main function performs the following functions:
  45          *  1: Starts the EEPROM
  46          *  2: Initializes the LCD
  47          *  3: Prints a reset counter saved in the EEPROM and increments it
  48          *  4: If a button is pressed, erases the EEPROM array and increments the erase
  49          *     counter.
  50          *
  51          * Parameters:
  52          *  None
C51 COMPILER V9.51   MAIN                                                                  10/31/2016 12:08:32 PAGE 2   

  53          *
  54          * Return:
  55          *  None
  56          *
  57          *******************************************************************************/
  58          int main()
  59          {
  60   1          uint8 resetCounter = 0;
  61   1          uint8 eraseCounter = 0;
  62   1          uint8 eepromBusy = 0;
  63   1          
  64   1          /* Start EEPROM and Character LCD components */
  65   1          LCD_Start();
  66   1          EEPROM_Start();
  67   1          
  68   1          /* Clear LCD */
  69   1          LCD_ClearDisplay();
  70   1      
  71   1          CyGlobalIntEnable;
  72   1          
  73   1          /* Print header */
  74   1          LCD_PlaceString(0u, 0u, "EEPROM example");
  75   1      
  76   1          /* Read from EEPROM counters */
  77   1          resetCounter = EEPROM_ReadByte(RESET_COUNTER_BYTE);
  78   1          eraseCounter = EEPROM_ReadByte(ERASE_COUNTER_BYTE);
  79   1          
  80   1          /* Increment and save reset counter */
  81   1          resetCounter++;
  82   1          
  83   1          LED_BUSY_Write(LED_ON);
  84   1          EEPROM_WriteByte(resetCounter, RESET_COUNTER_BYTE);
  85   1          LED_BUSY_Write(LED_OFF);
  86   1          
  87   1          /* Print counters to LCD */
  88   1          LCD_PlaceString(1u, 0u, "RST=");
  89   1          LCD_PrintInt8(resetCounter);
  90   1          LCD_PlaceString(1u, 7u, "ERASE=");
  91   1          LCD_PrintInt8(eraseCounter);
  92   1          
  93   1          for(;;)
  94   1          {
  95   2              /* Erase counter button pressed */
  96   2              if((Reset_CNT_Read() == 0u)&&(eepromBusy == 0u))
  97   2              {
  98   3                  /* Debounce erase button */
  99   3                  CyDelay(DEBOUNCE_DELAY_MS);
 100   3                  if((Reset_CNT_Read() == 0u)&&(eepromBusy == 0u))
 101   3                  {
 102   4                      /*
 103   4                      Increment erase counter and trigger non-blocking erase for
 104   4                      EEPROM sector that is being used.
 105   4                      */
 106   4                      eraseCounter++;
 107   4                      EEPROM_StartErase(USED_EEPROM_SECTOR);
 108   4                      LED_BUSY_Write(LED_ON);
 109   4                      eepromBusy = 1u;
 110   4                  }
 111   3              }
 112   2              
 113   2              /* Handle led indication */
 114   2              handleLed();
C51 COMPILER V9.51   MAIN                                                                  10/31/2016 12:08:32 PAGE 3   

 115   2              
 116   2              /* Poll erase statue if it was started */
 117   2              if (eepromBusy == 1u)
 118   2              {
 119   3                  if (CYRET_SUCCESS == EEPROM_Query())
 120   3                  {
 121   4                      /* Save erase counter and print values to LCD */
 122   4                      EEPROM_WriteByte(eraseCounter, ERASE_COUNTER_BYTE);
 123   4                      LED_BUSY_Write(LED_OFF);
 124   4                      LCD_PlaceString(1u, 0u, "RST=");
 125   4                      LCD_PrintInt8(EEPROM_ReadByte(RESET_COUNTER_BYTE));
 126   4                      LCD_PlaceString(1u, 7u, "ERASE=");
 127   4                      LCD_PrintInt8(eraseCounter);
 128   4                      eepromBusy = 0u;
 129   4                  }
 130   3              }
 131   2          }
 132   1      }
 133          
 134          
 135          /*******************************************************************************
 136          * Function Name: LCD_PlaceString
 137          ********************************************************************************
 138          *
 139          * Summary:
 140          *  Places a string to the specified location on the LCD.
 141          *
 142          * Parameters:
 143          *  row:    The specific row of the LCD module to be written.
 144          *  column: The column of the LCD module to be written
 145          *  string: The pointer to the head of the char8 array to be written to the LCD
 146          *          module
 147          *
 148          * Return:
 149          *  None
 150          *
 151          *******************************************************************************/
 152          void LCD_PlaceString(uint8 row, uint8 column, char8 const string[])
 153          {
 154   1          LCD_Position(row, column);
 155   1          LCD_PrintString(string);
 156   1      }
 157          
 158          
 159          /*******************************************************************************
 160          * Function Name: handleLed
 161          ********************************************************************************
 162          *
 163          * Summary:
 164          *  Triggers a LED state each 32767th time that it is called
 165          *
 166          * Parameters:
 167          *  None
 168          *
 169          * Return:
 170          *  None
 171          *
 172          *******************************************************************************/
 173          void handleLed(void)
 174          {
 175   1          static uint16 cnt = 0u;
 176   1      
C51 COMPILER V9.51   MAIN                                                                  10/31/2016 12:08:32 PAGE 4   

 177   1          if (cnt == 32767)
 178   1          {
 179   2              LED_Write(~LED_Read());
 180   2              cnt = 0u;
 181   2          }
 182   1          else
 183   1          {
 184   2              cnt++;
 185   2          }
 186   1      }
 187          
 188          /* [] END OF FILE */
C51 COMPILER V9.51   MAIN                                                                  10/31/2016 12:08:32 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#resetCounter
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
0005 A3                INC     DPTR
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
0007 A3                INC     DPTR
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
0009 120000      E     LCALL   LCD_Start
                                           ; SOURCE LINE # 66
000C 120000      E     LCALL   EEPROM_Start
                                           ; SOURCE LINE # 69
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _LCD_WriteControl
                                           ; SOURCE LINE # 71
0014 D2AF              SETB    EA
0016 9044F4            MOV     DPTR,#044F4H
0019 74FD              MOV     A,#0FDH
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
001C 7BFF              MOV     R3,#0FFH
001E 7A00        R     MOV     R2,#HIGH ?SC_0
0020 7900        R     MOV     R1,#LOW ?SC_0
0022 E4                CLR     A
0023 FD                MOV     R5,A
0024 FF                MOV     R7,A
0025 120000      R     LCALL   _LCD_PlaceString
                                           ; SOURCE LINE # 77
0028 7F00              MOV     R7,#00H
002A 7E04              MOV     R6,#04H
002C 120000      E     LCALL   _EEPROM_ReadByte
002F 900000      R     MOV     DPTR,#resetCounter
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
0034 7F01              MOV     R7,#01H
0036 7E04              MOV     R6,#04H
0038 120000      E     LCALL   _EEPROM_ReadByte
003B 900000      R     MOV     DPTR,#eraseCounter
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 81
0040 900000      R     MOV     DPTR,#resetCounter
0043 E0                MOVX    A,@DPTR
0044 04                INC     A
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0046 7F01              MOV     R7,#01H
0048 120000      E     LCALL   _LED_BUSY_Write
                                           ; SOURCE LINE # 84
004B 900000      R     MOV     DPTR,#resetCounter
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
C51 COMPILER V9.51   MAIN                                                                  10/31/2016 12:08:32 PAGE 6   

0050 7D00              MOV     R5,#00H
0052 7C04              MOV     R4,#04H
0054 120000      E     LCALL   _EEPROM_WriteByte
                                           ; SOURCE LINE # 85
0057 E4                CLR     A
0058 FF                MOV     R7,A
0059 120000      E     LCALL   _LED_BUSY_Write
                                           ; SOURCE LINE # 88
005C 7BFF              MOV     R3,#0FFH
005E 7A00        R     MOV     R2,#HIGH ?SC_15
0060 7900        R     MOV     R1,#LOW ?SC_15
0062 E4                CLR     A
0063 FD                MOV     R5,A
0064 7F01              MOV     R7,#01H
0066 120000      R     LCALL   _LCD_PlaceString
                                           ; SOURCE LINE # 89
0069 900000      R     MOV     DPTR,#resetCounter
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E 120000      E     LCALL   _LCD_PrintInt8
                                           ; SOURCE LINE # 90
0071 7BFF              MOV     R3,#0FFH
0073 7A00        R     MOV     R2,#HIGH ?SC_20
0075 7900        R     MOV     R1,#LOW ?SC_20
0077 7D07              MOV     R5,#07H
0079 7F01              MOV     R7,#01H
007B 120000      R     LCALL   _LCD_PlaceString
                                           ; SOURCE LINE # 91
007E 900000      R     MOV     DPTR,#eraseCounter
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 120000      E     LCALL   _LCD_PrintInt8
                                           ; SOURCE LINE # 93
0086         ?C0001:
                                           ; SOURCE LINE # 94
                                           ; SOURCE LINE # 96
0086 120000      E     LCALL   Reset_CNT_Read
0089 EF                MOV     A,R7
008A 7030              JNZ     ?C0003
008C 900000      R     MOV     DPTR,#eepromBusy
008F E0                MOVX    A,@DPTR
0090 702A              JNZ     ?C0003
                                           ; SOURCE LINE # 97
                                           ; SOURCE LINE # 99
0092 7F64              MOV     R7,#064H
0094 FE                MOV     R6,A
0095 FD                MOV     R5,A
0096 FC                MOV     R4,A
0097 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 100
009A 120000      E     LCALL   Reset_CNT_Read
009D EF                MOV     A,R7
009E 701C              JNZ     ?C0003
00A0 900000      R     MOV     DPTR,#eepromBusy
00A3 E0                MOVX    A,@DPTR
00A4 7016              JNZ     ?C0003
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 106
00A6 900000      R     MOV     DPTR,#eraseCounter
00A9 E0                MOVX    A,@DPTR
00AA 04                INC     A
00AB F0                MOVX    @DPTR,A
C51 COMPILER V9.51   MAIN                                                                  10/31/2016 12:08:32 PAGE 7   

                                           ; SOURCE LINE # 107
00AC 7F01              MOV     R7,#01H
00AE 120000      E     LCALL   _EEPROM_StartErase
                                           ; SOURCE LINE # 108
00B1 7F01              MOV     R7,#01H
00B3 120000      E     LCALL   _LED_BUSY_Write
                                           ; SOURCE LINE # 109
00B6 900000      R     MOV     DPTR,#eepromBusy
00B9 7401              MOV     A,#01H
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
                                           ; SOURCE LINE # 111
00BC         ?C0003:
                                           ; SOURCE LINE # 114
00BC 120000      R     LCALL   handleLed
                                           ; SOURCE LINE # 117
00BF 900000      R     MOV     DPTR,#eepromBusy
00C2 E0                MOVX    A,@DPTR
00C3 B401C0            CJNE    A,#01H,?C0001
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 119
00C6 120000      E     LCALL   EEPROM_Query
00C9 EF                MOV     A,R7
00CA 70BA              JNZ     ?C0001
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 122
00CC 900000      R     MOV     DPTR,#eraseCounter
00CF E0                MOVX    A,@DPTR
00D0 FF                MOV     R7,A
00D1 7D01              MOV     R5,#01H
00D3 7C04              MOV     R4,#04H
00D5 120000      E     LCALL   _EEPROM_WriteByte
                                           ; SOURCE LINE # 123
00D8 E4                CLR     A
00D9 FF                MOV     R7,A
00DA 120000      E     LCALL   _LED_BUSY_Write
                                           ; SOURCE LINE # 124
00DD 7BFF              MOV     R3,#0FFH
00DF 7A00        R     MOV     R2,#HIGH ?SC_15
00E1 7900        R     MOV     R1,#LOW ?SC_15
00E3 E4                CLR     A
00E4 FD                MOV     R5,A
00E5 7F01              MOV     R7,#01H
00E7 120000      R     LCALL   _LCD_PlaceString
                                           ; SOURCE LINE # 125
00EA 7F00              MOV     R7,#00H
00EC 7E04              MOV     R6,#04H
00EE 120000      E     LCALL   _EEPROM_ReadByte
00F1 120000      E     LCALL   _LCD_PrintInt8
                                           ; SOURCE LINE # 126
00F4 7BFF              MOV     R3,#0FFH
00F6 7A00        R     MOV     R2,#HIGH ?SC_20
00F8 7900        R     MOV     R1,#LOW ?SC_20
00FA 7D07              MOV     R5,#07H
00FC 7F01              MOV     R7,#01H
00FE 120000      R     LCALL   _LCD_PlaceString
                                           ; SOURCE LINE # 127
0101 900000      R     MOV     DPTR,#eraseCounter
0104 E0                MOVX    A,@DPTR
0105 FF                MOV     R7,A
0106 120000      E     LCALL   _LCD_PrintInt8
                                           ; SOURCE LINE # 128
C51 COMPILER V9.51   MAIN                                                                  10/31/2016 12:08:32 PAGE 8   

0109 E4                CLR     A
010A 900000      R     MOV     DPTR,#eepromBusy
010D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
010E 020000      R     LJMP    ?C0001
0111 22                RET     
             ; FUNCTION main (END)

             ; FUNCTION _LCD_PlaceString (BEGIN)
                                           ; SOURCE LINE # 152
0000 900000      R     MOV     DPTR,#row
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EA                MOV     A,R2
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F E9                MOV     A,R1
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
0011 900000      R     MOV     DPTR,#row
0014 E0                MOVX    A,@DPTR
0015 FF                MOV     R7,A
0016 A3                INC     DPTR
0017 E0                MOVX    A,@DPTR
0018 FD                MOV     R5,A
0019 120000      E     LCALL   _LCD_Position
                                           ; SOURCE LINE # 155
001C 900000      R     MOV     DPTR,#string
001F E0                MOVX    A,@DPTR
0020 FB                MOV     R3,A
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
0023 FA                MOV     R2,A
0024 A3                INC     DPTR
0025 E0                MOVX    A,@DPTR
0026 F9                MOV     R1,A
0027 120000      E     LCALL   _LCD_PrintString
                                           ; SOURCE LINE # 156
002A 22                RET     
             ; FUNCTION _LCD_PlaceString (END)

             ; FUNCTION handleLed (BEGIN)
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 177
0000 900000      R     MOV     DPTR,#cnt
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 B4FF15            CJNE    A,#0FFH,?C0009
000A EE                MOV     A,R6
C51 COMPILER V9.51   MAIN                                                                  10/31/2016 12:08:32 PAGE 9   

000B B47F11            CJNE    A,#07FH,?C0009
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
000E 120000      E     LCALL   LED_Read
0011 EF                MOV     A,R7
0012 F4                CPL     A
0013 FF                MOV     R7,A
0014 120000      E     LCALL   _LED_Write
                                           ; SOURCE LINE # 180
0017 E4                CLR     A
0018 900000      R     MOV     DPTR,#cnt
001B F0                MOVX    @DPTR,A
001C A3                INC     DPTR
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
001E 22                RET     
001F         ?C0009:
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
001F 900000      R     MOV     DPTR,#cnt+01H
0022 E0                MOVX    A,@DPTR
0023 04                INC     A
0024 F0                MOVX    @DPTR,A
0025 7006              JNZ     ?C0013
0027 900000      R     MOV     DPTR,#cnt
002A E0                MOVX    A,@DPTR
002B 04                INC     A
002C F0                MOVX    @DPTR,A
002D         ?C0013:
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
002D         ?C0011:
002D 22                RET     
             ; FUNCTION handleLed (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    363    ----
   CONSTANT SIZE    =     27    ----
   XDATA SIZE       =      2       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
