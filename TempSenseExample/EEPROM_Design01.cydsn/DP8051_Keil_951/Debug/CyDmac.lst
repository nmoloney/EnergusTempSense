C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYDMAC
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\CyDmac.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.
                    -\DP8051_Keil_951\Debug/CyDmac.lst) CD OT(3,SPEED) OJ(.\DP8051_Keil_951\Debug\CyDmac.obj)

line level    source

*** WARNING C500 IN LINE 1 OF .\Generated_Source\PSoC3\CyDmac.c: INCORRECT LICENSE ID CODE (LIC) IN 'TOOLS.INI'
   1          /*******************************************************************************
   2          * File Name: CyDmac.c
   3          * Version 5.30
   4          *
   5          * Description:
   6          *  Provides an API for the DMAC component. The API includes functions for the
   7          *  DMA controller, DMA channels and Transfer Descriptors.
   8          *
   9          *  This API is the library version not the auto generated code that gets
  10          *  generated when the user places a DMA component on the schematic.
  11          *
  12          *  The auto generated code would use the APi's in this module.
  13          *
  14          * Note:
  15          *  This code is endian agnostic.
  16          *
  17          *  The Transfer Descriptor memory can be used as regular memory if the TD's are
  18          *  not being used.
  19          *
  20          *  This code uses the first byte of each TD to manage the free list of TD's.
  21          *  The user can overwrite this once the TD is allocated.
  22          *
  23          ********************************************************************************
  24          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  25          * You may use this file only in accordance with the license, terms, conditions,
  26          * disclaimers, and limitations in the end user license agreement accompanying
  27          * the software package with which this file was provided.
  28          *******************************************************************************/
  29          
  30          #include "CyDmac.h"
  31          
  32          
  33          /*******************************************************************************
  34          * The following variables are initialized from CyDmacConfigure() function that
  35          * is executed from initialize_psoc() at the early initialization stage.
  36          * In case of IAR EW IDE, initialize_psoc() is executed before the data sections
  37          * are initialized. To avoid zeroing, these variables should be initialized
  38          * properly during segments initialization as well.
  39          *******************************************************************************/
  40          static uint8  CyDmaTdCurrentNumber = CY_DMA_NUMBEROF_TDS;           /* Current Number of free elements on 
             -list */
  41          static uint8  CyDmaTdFreeIndex = (uint8)(CY_DMA_NUMBEROF_TDS - 1u); /* Index of first available TD */
  42          static uint32 CyDmaChannels = DMA_CHANNELS_USED__MASK0;              /* Bit map of DMA channel ownership *
             -/
  43          
  44          
  45          /*******************************************************************************
  46          * Function Name: CyDmacConfigure
  47          ********************************************************************************
  48          *
  49          * Summary:
  50          *  Creates a linked list of all the TDs to be allocated. This function is called
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 2   

  51          *  by the startup code; you do not normally need to call it. You can call this
  52          *  function if all of the DMA channels are inactive.
  53          *
  54          * Parameters:
  55          *  None
  56          *
  57          * Return:
  58          *  None
  59          *
  60          *******************************************************************************/
  61          void CyDmacConfigure(void) 
  62          {
  63   1          uint8 dmaIndex;
  64   1      
  65   1          /* Set TD list variables. */
  66   1          CyDmaTdFreeIndex     = (uint8)(CY_DMA_NUMBEROF_TDS - 1u);
  67   1          CyDmaTdCurrentNumber = CY_DMA_NUMBEROF_TDS;
  68   1      
  69   1          /* Make TD free list. */
  70   1          for(dmaIndex = (uint8)(CY_DMA_NUMBEROF_TDS - 1u); dmaIndex != 0u; dmaIndex--)
  71   1          {
  72   2              CY_DMA_TDMEM_STRUCT_PTR[dmaIndex].TD0[0u] = (uint8)(dmaIndex - 1u);
  73   2          }
  74   1      
  75   1          /* Make last one point to zero. */
  76   1          CY_DMA_TDMEM_STRUCT_PTR[dmaIndex].TD0[0u] = 0u;
  77   1      }
  78          
  79          
  80          /*******************************************************************************
  81          * Function Name: CyDmacError
  82          ********************************************************************************
  83          *
  84          * Summary:
  85          *  Returns errors of the last failed DMA transaction.
  86          *
  87          * Parameters:
  88          *  None
  89          *
  90          * Return:
  91          *  Errors of the last failed DMA transaction.
  92          *
  93          *  DMAC_PERIPH_ERR:
  94          *   Set to 1 when a peripheral responds to a bus transaction with an error
  95          *   response.
  96          *
  97          *  DMAC_UNPOP_ACC:
  98          *   Set to 1 when an access is attempted to an invalid address.
  99          *
 100          *  DMAC_BUS_TIMEOUT:
 101          *   Set to 1 when a bus timeout occurs. Cleared by writing a 1. Timeout values
 102          *   are determined by the BUS_TIMEOUT field in the PHUBCFG register.
 103          *
 104          * Theory:
 105          *  Once an error occurs the error bits are sticky and are only cleared by
 106          *  writing 1 to the error register.
 107          *
 108          *******************************************************************************/
 109          uint8 CyDmacError(void) 
 110          {
 111   1          return((uint8)(((uint32) 0x0Eu) & *CY_DMA_ERR_PTR));
 112   1      }
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 3   

 113          
 114          
 115          /*******************************************************************************
 116          * Function Name: CyDmacClearError
 117          ********************************************************************************
 118          *
 119          * Summary:
 120          *  Clears the error bits in the error register of the DMAC.
 121          *
 122          * Parameters:
 123          * error:
 124          *   Clears the error bits in the DMAC error register.
 125          *
 126          *  DMAC_PERIPH_ERR:
 127          *   Set to 1 when a peripheral responds to a bus transaction with an error
 128          *   response.
 129          *
 130          *  DMAC_UNPOP_ACC:
 131          *   Set to 1 when an access is attempted to an invalid address.
 132          *
 133          *  DMAC_BUS_TIMEOUT:
 134          *   Set to 1 when a bus timeout occurs. Cleared by writing 1. Timeout values
 135          *   are determined by the BUS_TIMEOUT field in the PHUBCFG register.
 136          *
 137          * Return:
 138          *  None
 139          *
 140          * Theory:
 141          *  Once an error occurs the error bits are sticky and are only cleared by
 142          *  writing 1 to the error register.
 143          *
 144          *******************************************************************************/
 145          void CyDmacClearError(uint8 error) 
 146          {
 147   1          *CY_DMA_ERR_PTR = (((uint32)0x0Fu) & ((uint32)error));
 148   1      }
 149          
 150          
 151          /*******************************************************************************
 152          * Function Name: CyDmacErrorAddress
 153          ********************************************************************************
 154          *
 155          * Summary:
 156          *  When DMAC_BUS_TIMEOUT, DMAC_UNPOP_ACC, and DMAC_PERIPH_ERR occur the
 157          *  address of the error is written to the error address register and can be read
 158          *  with this function.
 159          *
 160          *  If there are multiple errors, only the address of the first is saved.
 161          *
 162          * Parameters:
 163          *  None
 164          *
 165          * Return:
 166          *  The address that caused the error.
 167          *
 168          *******************************************************************************/
 169          uint32 CyDmacErrorAddress(void) 
 170          {
 171   1          return(CY_GET_REG32(CY_DMA_ERR_ADR_PTR));
 172   1      }
 173          
 174          
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 4   

 175          /*******************************************************************************
 176          * Function Name: CyDmaChAlloc
 177          ********************************************************************************
 178          *
 179          * Summary:
 180          *  Allocates a channel from the DMAC to be used in all functions that require a
 181          *  channel handle.
 182          *
 183          * Parameters:
 184          *  None
 185          *
 186          * Return:
 187          *  The allocated channel number. Zero is a valid channel number.
 188          *  DMA_INVALID_CHANNEL is returned if there are no channels available.
 189          *
 190          *******************************************************************************/
 191          uint8 CyDmaChAlloc(void) 
 192          {
 193   1          uint8 interruptState;
 194   1          uint8 dmaIndex;
 195   1          uint32 channel = 1u;
 196   1      
 197   1      
 198   1          /* Enter critical section! */
 199   1          interruptState = CyEnterCriticalSection();
 200   1      
 201   1          /* Look for free channel. */
 202   1          for(dmaIndex = 0u; dmaIndex < CY_DMA_NUMBEROF_CHANNELS; dmaIndex++)
 203   1          {
 204   2              if(0uL == (CyDmaChannels & channel))
 205   2              {
 206   3                  /* Mark channel as used. */
 207   3                  CyDmaChannels |= channel;
 208   3                  break;
 209   3              }
 210   2      
 211   2              channel <<= 1u;
 212   2          }
 213   1      
 214   1          if(dmaIndex >= CY_DMA_NUMBEROF_CHANNELS)
 215   1          {
 216   2              dmaIndex = CY_DMA_INVALID_CHANNEL;
 217   2          }
 218   1      
 219   1          /* Exit critical section! */
 220   1          CyExitCriticalSection(interruptState);
 221   1      
 222   1          return(dmaIndex);
 223   1      }
 224          
 225          
 226          /*******************************************************************************
 227          * Function Name: CyDmaChFree
 228          ********************************************************************************
 229          *
 230          * Summary:
 231          *  Frees a channel allocated by DmaChAlloc().
 232          *
 233          * Parameters:
 234          *  uint8 chHandle:
 235          *   The handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 236          *
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 5   

 237          * Return:
 238          *  CYRET_SUCCESS if successful.
 239          *  CYRET_BAD_PARAM if chHandle is invalid.
 240          *
 241          *******************************************************************************/
 242          cystatus CyDmaChFree(uint8 chHandle) 
 243          {
 244   1          cystatus status = CYRET_BAD_PARAM;
 245   1          uint8 interruptState;
 246   1      
 247   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 248   1          {
 249   2              /* Enter critical section */
 250   2              interruptState = CyEnterCriticalSection();
 251   2      
 252   2              /* Clear bit mask that keeps track of ownership. */
 253   2              CyDmaChannels &= ~(((uint32) 1u) << chHandle);
 254   2      
 255   2              /* Exit critical section */
 256   2              CyExitCriticalSection(interruptState);
 257   2              status = CYRET_SUCCESS;
 258   2          }
 259   1      
 260   1          return(status);
 261   1      }
 262          
 263          
 264          /*******************************************************************************
 265          * Function Name: CyDmaChEnable
 266          ********************************************************************************
 267          *
 268          * Summary:
 269          *  Enables the DMA channel. A software or hardware request still must happen
 270          *  before the channel is executed.
 271          *
 272          * Parameters:
 273          *  uint8 chHandle:
 274          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 275          *
 276          *  uint8 preserveTds:
 277          *   Preserves the original TD state when the TD has completed. This parameter
 278          *   applies to all TDs in the channel.
 279          *
 280          *   0 - When TD is completed, the DMAC leaves the TD configuration values in
 281          *   their current state, and does not restore them to their original state.
 282          *
 283          *   1 - When TD is completed, the DMAC restores the original configuration
 284          *   values of the TD.
 285          *
 286          *  When preserveTds is set, the TD slot that equals the channel number becomes
 287          *  RESERVED and that becomes where the working registers exist. So, for example,
 288          *  if you are using CH06 and preserveTds is set, you are not allowed to use TD
 289          *  slot 6. That is reclaimed by the DMA engine for its private use.
 290          *
 291          *  Note Do not chain back to a completed TD if the preserveTds for the channel
 292          *  is set to 0. When a TD has completed preserveTds for the channel set to 0,
 293          *  the transfer count will be at 0. If a TD with a transfer count of 0 is
 294          *  started, the TD will transfer an indefinite amount of data.
 295          *
 296          *  Take extra precautions when using the hardware request (DRQ) option when the
 297          *  preserveTds is set to 0, as you might be requesting the wrong data.
 298          *
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 6   

 299          * Return:
 300          *  CYRET_SUCCESS if successful.
 301          *  CYRET_BAD_PARAM if chHandle is invalid.
 302          *
 303          *******************************************************************************/
 304          cystatus CyDmaChEnable(uint8 chHandle, uint8 preserveTds) 
 305          {
 306   1          cystatus status = CYRET_BAD_PARAM;
 307   1      
 308   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 309   1          {
 310   2              if (0u != preserveTds)
 311   2              {
 312   3                  /* Store intermediate TD states separately in CHn_SEP_TD0/1 to
 313   3                  *  preserve original TD chain
 314   3                  */
 315   3                  CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] |= CY_DMA_CH_BASIC_CFG_WORK_SEP;
 316   3              }
 317   2              else
 318   2              {
 319   3                  /* Store intermediate and final TD states on top of original TD chain */
 320   3                  CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] &= (uint8)(~CY_DMA_CH_BASIC_CFG_WORK_SEP);
 321   3              }
 322   2      
 323   2              /* Enable channel */
 324   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] |= CY_DMA_CH_BASIC_CFG_EN;
 325   2      
 326   2              status = CYRET_SUCCESS;
 327   2          }
 328   1      
 329   1          return(status);
 330   1      }
 331          
 332          
 333          /*******************************************************************************
 334          * Function Name: CyDmaChDisable
 335          ********************************************************************************
 336          *
 337          * Summary:
 338          *  Disables the DMA channel. Once this function is called, CyDmaChStatus() may
 339          *  be called to determine when the channel is disabled and which TDs were being
 340          *  executed.
 341          *
 342          *  If it is currently executing it will allow the current burst to finish
 343          *  naturally.
 344          *
 345          * Parameters:
 346          *  uint8 chHandle:
 347          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 348          *
 349          * Return:
 350          *  CYRET_SUCCESS if successful.
 351          *  CYRET_BAD_PARAM if chHandle is invalid.
 352          *
 353          *******************************************************************************/
 354          cystatus CyDmaChDisable(uint8 chHandle) 
 355          {
 356   1          cystatus status = CYRET_BAD_PARAM;
 357   1      
 358   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 359   1          {
 360   2              /***********************************************************************
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 7   

 361   2              * Should not change configuration information of a DMA channel when it
 362   2              * is active (or vulnerable to becoming active).
 363   2              ***********************************************************************/
 364   2      
 365   2              /* Disable channel */
 366   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0] &= ((uint8) (~CY_DMA_CH_BASIC_CFG_EN));
 367   2      
 368   2              /* Store intermediate and final TD states on top of original TD chain */
 369   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0] &= ((uint8) (~CY_DMA_CH_BASIC_CFG_WORK_SEP));
 370   2              status = CYRET_SUCCESS;
 371   2          }
 372   1      
 373   1          return(status);
 374   1      }
 375          
 376          
 377          /*******************************************************************************
 378          * Function Name: CyDmaClearPendingDrq
 379          ********************************************************************************
 380          *
 381          * Summary:
 382          *  Clears pending the DMA data request.
 383          *
 384          * Parameters:
 385          *  uint8 chHandle:
 386          *   Handle to the dma channel.
 387          *
 388          * Return:
 389          *  CYRET_SUCCESS if successful.
 390          *  CYRET_BAD_PARAM if chHandle is invalid.
 391          *
 392          *******************************************************************************/
 393          cystatus CyDmaClearPendingDrq(uint8 chHandle) 
 394          {
 395   1          cystatus status = CYRET_BAD_PARAM;
 396   1      
 397   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 398   1          {
 399   2              CY_DMA_CH_STRUCT_PTR[chHandle].action[0] |= CY_DMA_CPU_TERM_CHAIN;
 400   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0] |= 0x01u;
 401   2              status = CYRET_SUCCESS;
 402   2          }
 403   1      
 404   1          return(status);
 405   1      }
 406          
 407          
 408          /*******************************************************************************
 409          * Function Name: CyDmaChPriority
 410          ********************************************************************************
 411          *
 412          * Summary:
 413          *  Sets the priority of a DMA channel. You can use this function when you want
 414          *  to change the priority at run time. If the priority remains the same for a
 415          *  DMA channel, then you can configure the priority in the .cydwr file.
 416          *
 417          * Parameters:
 418          *  uint8 chHandle:
 419          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 420          *
 421          *  uint8 priority:
 422          *   Priority to set the channel to, 0 - 7.
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 8   

 423          *
 424          * Return:
 425          *  CYRET_SUCCESS if successful.
 426          *  CYRET_BAD_PARAM if chHandle is invalid.
 427          *
 428          *******************************************************************************/
 429          cystatus CyDmaChPriority(uint8 chHandle, uint8 priority) 
 430          {
 431   1          uint8 value;
 432   1          cystatus status = CYRET_BAD_PARAM;
 433   1      
 434   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 435   1          {
 436   2              value = CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] & ((uint8)(~(0x0Eu)));
 437   2      
 438   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] = value | ((uint8) ((priority & 0x7u) << 0x01u));
 439   2      
 440   2              status = CYRET_SUCCESS;
 441   2          }
 442   1      
 443   1          return(status);
 444   1      }
 445          
 446          
 447          /*******************************************************************************
 448          * Function Name: CyDmaChSetExtendedAddress
 449          ********************************************************************************
 450          *
 451          * Summary:
 452          *  Sets the high 16 bits of the source and destination addresses for the DMA
 453          *  channel (valid for all TDs in the chain).
 454          *
 455          * Parameters:
 456          *  uint8 chHandle:
 457          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 458          *
 459          *  uint16 source:
 460          *   Upper 16 bit address of the DMA transfer source.
 461          *
 462          *  uint16 destination:
 463          *   Upper 16 bit address of the DMA transfer destination.
 464          *
 465          * Return:
 466          *  CYRET_SUCCESS if successful.
 467          *  CYRET_BAD_PARAM if chHandle is invalid.
 468          *
 469          *******************************************************************************/
 470          cystatus CyDmaChSetExtendedAddress(uint8 chHandle, uint16 source, uint16 destination) \
 471              
 472          {
 473   1          cystatus status = CYRET_BAD_PARAM;
 474   1          reg16 *convert;
 475   1      
 476   1          #if(CY_PSOC5)
              
                      /* 0x1FFF8000-0x1FFFFFFF needs to use alias at 0x20008000-0x2000FFFF */
                      if(source == 0x1FFFu)
                      {
                          source = 0x2000u;
                      }
              
                      if(destination == 0x1FFFu)
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 9   

                      {
                          destination = 0x2000u;
                      }
              
                  #endif  /* (CY_PSOC5) */
 490   1      
 491   1      
 492   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 493   1          {
 494   2              /* Set source address */
 495   2              convert = (reg16 *) &CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG1[0];
 496   2              CY_SET_REG16(convert, source);
 497   2      
 498   2              /* Set destination address */
 499   2              convert = (reg16 *) &CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG1[2u];
 500   2              CY_SET_REG16(convert, destination);
 501   2              status = CYRET_SUCCESS;
 502   2          }
 503   1      
 504   1          return(status);
 505   1      }
 506          
 507          
 508          /*******************************************************************************
 509          * Function Name: CyDmaChSetInitialTd
 510          ********************************************************************************
 511          *
 512          * Summary:
 513          *  Sets the initial TD to be executed for the channel when the CyDmaChEnable()
 514          *  function is called.
 515          *
 516          * Parameters:
 517          *  uint8 chHandle:
 518          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitialize().
 519          *
 520          *  uint8 startTd:
 521          *   Set the TD index as the first TD associated with the channel. Zero is
 522          *   a valid TD index.
 523          *
 524          * Return:
 525          *  CYRET_SUCCESS if successful.
 526          *  CYRET_BAD_PARAM if chHandle is invalid.
 527          *
 528          *******************************************************************************/
 529          cystatus CyDmaChSetInitialTd(uint8 chHandle, uint8 startTd) 
 530          {
 531   1          cystatus status = CYRET_BAD_PARAM;
 532   1      
 533   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 534   1          {
 535   2              CY_DMA_CH_STRUCT_PTR[chHandle].basic_status[1u] = startTd;
 536   2              status = CYRET_SUCCESS;
 537   2          }
 538   1      
 539   1          return(status);
 540   1      }
 541          
 542          
 543          /*******************************************************************************
 544          * Function Name: CyDmaChSetRequest
 545          ********************************************************************************
 546          *
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 10  

 547          * Summary:
 548          *  Allows the caller to terminate a chain of TDs, terminate one TD, or create a
 549          *  direct request to start the DMA channel.
 550          *
 551          * Parameters:
 552          *  uint8 chHandle:
 553          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 554          *
 555          *  uint8 request:
 556          *   One of the following constants. Each of the constants is a three-bit value.
 557          *
 558          *   CPU_REQ         - Create a direct request to start the DMA channel
 559          *   CPU_TERM_TD     - Terminate one TD
 560          *   CPU_TERM_CHAIN  - Terminate a chain of TDs
 561          *
 562          * Return:
 563          *  CYRET_SUCCESS if successful.
 564          *  CYRET_BAD_PARAM if chHandle is invalid.
 565          *
 566          *******************************************************************************/
 567          cystatus CyDmaChSetRequest(uint8 chHandle, uint8 request) 
 568          {
 569   1          cystatus status = CYRET_BAD_PARAM;
 570   1      
 571   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 572   1          {
 573   2              CY_DMA_CH_STRUCT_PTR[chHandle].action[0u] |= (request & (CPU_REQ | CPU_TERM_TD | CPU_TERM_CHAIN));
 574   2              status = CYRET_SUCCESS;
 575   2          }
 576   1      
 577   1          return(status);
 578   1      }
 579          
 580          
 581          /*******************************************************************************
 582          * Function Name: CyDmaChGetRequest
 583          ********************************************************************************
 584          *
 585          * Summary:
 586          *  This function allows the caller of CyDmaChSetRequest() to determine if the
 587          *  request was completed.
 588          *
 589          * Parameters:
 590          *  uint8 chHandle:
 591          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 592          *
 593          * Return:
 594          *  Returns a three-bit field, corresponding to the three bits of the request,
 595          *  which describes the state of the previously posted request. If the value is
 596          *  zero, the request was completed. CY_DMA_INVALID_CHANNEL if the handle is
 597          *  invalid.
 598          *
 599          *******************************************************************************/
 600          cystatus CyDmaChGetRequest(uint8 chHandle) 
 601          {
 602   1          cystatus status = CY_DMA_INVALID_CHANNEL;
 603   1      
 604   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 605   1          {
 606   2              status = (cystatus) ((uint32)CY_DMA_CH_STRUCT_PTR[chHandle].action[0u] &
 607   2                                  (uint32)(CY_DMA_CPU_REQ | CY_DMA_CPU_TERM_TD | CY_DMA_CPU_TERM_CHAIN));
 608   2          }
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 11  

 609   1      
 610   1          return(status);
 611   1      }
 612          
 613          
 614          /*******************************************************************************
 615          * Function Name: CyDmaChStatus
 616          ********************************************************************************
 617          *
 618          * Summary:
 619          *  Determines the status of the DMA channel.
 620          *
 621          * Parameters:
 622          *  uint8 chHandle:
 623          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitalize().
 624          *
 625          *  uint8 * currentTd:
 626          *   The address to store the index of the current TD. Can be NULL if the value
 627          *   is not needed.
 628          *
 629          *  uint8 * state:
 630          *   The address to store the state of the channel. Can be NULL if the value is
 631          *   not needed.
 632          *
 633          *   STATUS_TD_ACTIVE
 634          *    0: Channel is not currently being serviced by DMAC
 635          *    1: Channel is currently being serviced by DMAC
 636          *
 637          *   STATUS_CHAIN_ACTIVE
 638          *    0: TD chain is inactive; either no DMA requests have triggered a new chain
 639          *       or the previous chain has completed.
 640          *    1: TD chain has been triggered by a DMA request
 641          *
 642          * Return:
 643          *  CYRET_SUCCESS if successful.
 644          *  CYRET_BAD_PARAM if chHandle is invalid.
 645          *
 646          * Theory:
 647          *   The caller can check on the activity of the Current TD and the Chain.
 648          *
 649          *******************************************************************************/
 650          cystatus CyDmaChStatus(uint8 chHandle, uint8 * currentTd, uint8 * state) 
 651          {
 652   1          cystatus status = CYRET_BAD_PARAM;
 653   1      
 654   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 655   1          {
 656   2              if(NULL != currentTd)
 657   2              {
 658   3                  *currentTd = CY_DMA_CH_STRUCT_PTR[chHandle].basic_status[1] & 0x7Fu;
 659   3              }
 660   2      
 661   2              if(NULL != state)
 662   2              {
 663   3                  *state= CY_DMA_CH_STRUCT_PTR[chHandle].basic_status[0];
 664   3              }
 665   2      
 666   2              status = CYRET_SUCCESS;
 667   2          }
 668   1      
 669   1          return (status);
 670   1      }
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 12  

 671          
 672          
 673          /*******************************************************************************
 674          * Function Name: CyDmaChSetConfiguration
 675          ********************************************************************************
 676          *
 677          * Summary:
 678          * Sets configuration information of the channel.
 679          *
 680          * Parameters:
 681          *  uint8 chHandle:
 682          *   A handle previously returned by CyDmaChAlloc() or DMA_DmaInitialize().
 683          *
 684          *  uint8 burstCount:
 685          *   Specifies the size of bursts (1 to 127) the data transfer should be divided
 686          *   into. If this value is zero then the whole transfer is done in one burst.
 687          *
 688          *  uint8 requestPerBurst:
 689          *   The whole of the data can be split into multiple bursts, if this is
 690          *   required to complete the transaction:
 691          *    0: All subsequent bursts after the first burst will be automatically
 692          *       requested and carried out
 693          *    1: All subsequent bursts after the first burst must also be individually
 694          *       requested.
 695          *
 696          *  uint8 tdDone0:
 697          *   Selects one of the TERMOUT0 interrupt lines to signal completion. The line
 698          *   connected to the nrq terminal will determine the TERMOUT0_SEL definition and
 699          *   should be used as supplied by cyfitter.h
 700          *
 701          *  uint8 tdDone1:
 702          *   Selects one of the TERMOUT1 interrupt lines to signal completion. The line
 703          *   connected to the nrq terminal will determine the TERMOUT1_SEL definition and
 704          *   should be used as supplied by cyfitter.h
 705          *
 706          *  uint8 tdStop:
 707          *   Selects one of the TERMIN interrupt lines to signal to the DMAC that the TD
 708          *   should terminate. The signal connected to the trq terminal will determine
 709          *   which TERMIN (termination request) is used.
 710          *
 711          * Return:
 712          *  CYRET_SUCCESS if successful.
 713          *  CYRET_BAD_PARAM if chHandle is invalid.
 714          *
 715          *******************************************************************************/
 716          cystatus CyDmaChSetConfiguration(uint8 chHandle, uint8 burstCount, uint8 requestPerBurst,
 717                                           uint8 tdDone0, uint8 tdDone1, uint8 tdStop) 
 718          {
 719   1          cystatus status = CYRET_BAD_PARAM;
 720   1      
 721   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
 722   1          {
 723   2              CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG0[0] = (burstCount & 0x7Fu) | ((uint8)((requestPerBurst & 0x
             -1u) << 7u));
 724   2              CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG0[1] = ((uint8)((tdDone1 & 0xFu) << 4u)) | (tdDone0 & 0xFu);
 725   2              CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG0[2] = 0x0Fu & tdStop;
 726   2              CY_DMA_CFGMEM_STRUCT_PTR[chHandle].CFG0[3] = 0u; /* burstcount_remain. */
 727   2      
 728   2              status = CYRET_SUCCESS;
 729   2          }
 730   1      
 731   1          return (status);
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 13  

 732   1      }
 733          
 734          
 735          /*******************************************************************************
 736          * Function Name: CyDmaTdAllocate
 737          ********************************************************************************
 738          *
 739          * Summary:
 740          *  Allocates a TD for use with an allocated DMA channel.
 741          *
 742          * Parameters:
 743          *  None
 744          *
 745          * Return:
 746          *  Zero-based index of the TD to be used by the caller. Since there are 128 TDs
 747          *  minus the reserved TDs (0 to 23), the value returned would range from 24 to
 748          *  127 not 24 to 128. DMA_INVALID_TD is returned if there are no free TDs
 749          *  available.
 750          *
 751          *******************************************************************************/
 752          uint8 CyDmaTdAllocate(void) 
 753          {
 754   1          uint8 interruptState;
 755   1          uint8 element = CY_DMA_INVALID_TD;
 756   1      
 757   1          /* Enter critical section! */
 758   1          interruptState = CyEnterCriticalSection();
 759   1      
 760   1          if(CyDmaTdCurrentNumber > NUMBEROF_CHANNELS)
 761   1          {
 762   2              /* Get pointer to Next available. */
 763   2              element = CyDmaTdFreeIndex;
 764   2      
 765   2              /* Decrement the count. */
 766   2              CyDmaTdCurrentNumber--;
 767   2      
 768   2              /* Update next available pointer. */
 769   2              CyDmaTdFreeIndex = CY_DMA_TDMEM_STRUCT_PTR[element].TD0[0];
 770   2          }
 771   1      
 772   1          /* Exit critical section! */
 773   1          CyExitCriticalSection(interruptState);
 774   1      
 775   1          return(element);
 776   1      }
 777          
 778          
 779          /*******************************************************************************
 780          * Function Name: CyDmaTdFree
 781          ********************************************************************************
 782          *
 783          * Summary:
 784          *  Returns a TD to the free list.
 785          *
 786          * Parameters:
 787          *  uint8 tdHandle:
 788          *   The TD handle returned by the CyDmaTdAllocate().
 789          *
 790          * Return:
 791          *  None
 792          *
 793          *******************************************************************************/
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 14  

 794          void CyDmaTdFree(uint8 tdHandle) 
 795          {
 796   1          if(tdHandle < CY_DMA_NUMBEROF_TDS)
 797   1          {
 798   2              /* Enter critical section! */
 799   2              uint8 interruptState = CyEnterCriticalSection();
 800   2      
 801   2              /* Get pointer to Next available. */
 802   2              CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[0u] = CyDmaTdFreeIndex;
 803   2      
 804   2              /* Set new Next Available. */
 805   2              CyDmaTdFreeIndex = tdHandle;
 806   2      
 807   2              /* Keep track of how many left. */
 808   2              CyDmaTdCurrentNumber++;
 809   2      
 810   2              /* Exit critical section! */
 811   2              CyExitCriticalSection(interruptState);
 812   2          }
 813   1      }
 814          
 815          
 816          /*******************************************************************************
 817          * Function Name: CyDmaTdFreeCount
 818          ********************************************************************************
 819          *
 820          * Summary:
 821          *  Returns the number of free TDs available to be allocated.
 822          *
 823          * Parameters:
 824          *  None
 825          *
 826          * Return:
 827          *  The number of free TDs.
 828          *
 829          *******************************************************************************/
 830          uint8 CyDmaTdFreeCount(void) 
 831          {
 832   1          return(CyDmaTdCurrentNumber - CY_DMA_NUMBEROF_CHANNELS);
 833   1      }
 834          
 835          
 836          /*******************************************************************************
 837          * Function Name: CyDmaTdSetConfiguration
 838          ********************************************************************************
 839          *
 840          * Summary:
 841          *  Configures the TD.
 842          *
 843          * Parameters:
 844          *  uint8 tdHandle:
 845          *   A handle previously returned by CyDmaTdAlloc().
 846          *
 847          *  uint16 transferCount:
 848          *   The size of the data transfer (in bytes) for this TD. A size of zero will
 849          *   cause the transfer to continue indefinitely. This parameter is limited to
 850          *   4095 bytes; the TD is not initialized at all when a higher value is passed.
 851          *
 852          *  uint8 nextTd:
 853          *   Zero based index of the next Transfer Descriptor in the TD chain. Zero is a
 854          *   valid pointer to the next TD; DMA_END_CHAIN_TD is the end of the chain.
 855          *   DMA_DISABLE_TD indicates an end to the chain and the DMA is disabled. No
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 15  

 856          *   further TDs are fetched. DMA_DISABLE_TD is only supported on PSoC3 and
 857          *   PSoC 5LP silicons.
 858          *
 859          *  uint8 configuration:
 860          *   Stores the Bit field of configuration bits.
 861          *
 862          *   CY_DMA_TD_SWAP_EN        - Perform endian swap
 863          *
 864          *   CY_DMA_TD_SWAP_SIZE4     - Swap size = 4 bytes
 865          *
 866          *   CY_DMA_TD_AUTO_EXEC_NEXT - The next TD in the chain will trigger
 867          *                              automatically when the current TD completes.
 868          *
 869          *   CY_DMA_TD_TERMIN_EN      - Terminate this TD if a positive edge on the trq
 870          *                              input line occurs. The positive edge must occur
 871          *                              during a burst. That is the only time the DMAC
 872          *                              will listen for it.
 873          *
 874          *   DMA__TD_TERMOUT_EN       - When this TD completes, the TERMOUT signal will
 875          *                              generate a pulse. Note that this option is
 876          *                              instance specific with the instance name followed
 877          *                              by two underscores. In this example, the instance
 878          *                              name is DMA.
 879          *
 880          *   CY_DMA_TD_INC_DST_ADR    - Increment DST_ADR according to the size of each
 881          *                              data transaction in the burst.
 882          *
 883          *   CY_DMA_TD_INC_SRC_ADR    - Increment SRC_ADR according to the size of each
 884          *                              data transaction in the burst.
 885          *
 886          * Return:
 887          *  CYRET_SUCCESS if successful.
 888          *  CYRET_BAD_PARAM if tdHandle or transferCount is invalid.
 889          *
 890          *******************************************************************************/
 891          cystatus CyDmaTdSetConfiguration(uint8 tdHandle, uint16 transferCount, uint8 nextTd, uint8 configuration) 
             -\
 892              
 893          {
 894   1          cystatus status = CYRET_BAD_PARAM;
 895   1      
 896   1          if((tdHandle < CY_DMA_NUMBEROF_TDS) && (0u == (0xF000u & transferCount)))
 897   1          {
 898   2              /* Set 12 bits transfer count. */
 899   2              reg16 *convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[0u];
 900   2              CY_SET_REG16(convert, transferCount);
 901   2      
 902   2              /* Set Next TD pointer. */
 903   2              CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[2u] = nextTd;
 904   2      
 905   2              /* Configure the TD */
 906   2              CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[3u] = configuration;
 907   2      
 908   2              status = CYRET_SUCCESS;
 909   2          }
 910   1      
 911   1          return(status);
 912   1      }
 913          
 914          
 915          /*******************************************************************************
 916          * Function Name: CyDmaTdGetConfiguration
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 16  

 917          ********************************************************************************
 918          *
 919          * Summary:
 920          *  Retrieves the configuration of the TD. If a NULL pointer is passed as a
 921          *  parameter, that parameter is skipped. You may request only the values you are
 922          *  interested in.
 923          *
 924          * Parameters:
 925          *  uint8 tdHandle:
 926          *   A handle previously returned by CyDmaTdAlloc().
 927          *
 928          *  uint16 * transferCount:
 929          *   The address to store the size of the data transfer (in bytes) for this TD.
 930          *   A size of zero could indicate that the TD has completed its transfer, or
 931          *   that the TD is doing an indefinite transfer.
 932          *
 933          *  uint8 * nextTd:
 934          *   The address to store the index of the next TD in the TD chain.
 935          *
 936          *  uint8 * configuration:
 937          *   The address to store the Bit field of configuration bits.
 938          *   See CyDmaTdSetConfiguration() function description.
 939          *
 940          * Return:
 941          *  CYRET_SUCCESS if successful.
 942          *  CYRET_BAD_PARAM if tdHandle is invalid.
 943          *
 944          * Side Effects:
 945          *  If TD has a transfer count of N and is executed, the transfer count becomes
 946          *  0. If it is reexecuted, the Transfer count of zero will be interpreted as a
 947          *  request for indefinite transfer. Be careful when requesting TD with a
 948          *  transfer count of zero.
 949          *
 950          *******************************************************************************/
 951          cystatus CyDmaTdGetConfiguration(uint8 tdHandle, uint16 * transferCount, uint8 * nextTd, uint8 * configura
             -tion) \
 952              
 953          {
 954   1          cystatus status = CYRET_BAD_PARAM;
 955   1      
 956   1          if(tdHandle < CY_DMA_NUMBEROF_TDS)
 957   1          {
 958   2              /* If we have pointer */
 959   2              if(NULL != transferCount)
 960   2              {
 961   3                  /* Get 12 bits of transfer count */
 962   3                  reg16 *convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[0];
 963   3                  *transferCount = 0x0FFFu & CY_GET_REG16(convert);
 964   3              }
 965   2      
 966   2              /* If we have pointer */
 967   2              if(NULL != nextTd)
 968   2              {
 969   3                  /* Get Next TD pointer */
 970   3                  *nextTd = CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[2u];
 971   3              }
 972   2      
 973   2              /* If we have pointer */
 974   2              if(NULL != configuration)
 975   2              {
 976   3                  /* Get configuration TD */
 977   3                  *configuration = CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD0[3u];
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 17  

 978   3              }
 979   2      
 980   2              status = CYRET_SUCCESS;
 981   2          }
 982   1      
 983   1          return(status);
 984   1      }
 985          
 986          
 987          /*******************************************************************************
 988          * Function Name: CyDmaTdSetAddress
 989          ********************************************************************************
 990          *
 991          * Summary:
 992          *  Sets the lower 16 bits of the source and destination addresses for this TD
 993          *  only.
 994          *
 995          * Parameters:
 996          *  uint8 tdHandle:
 997          *   A handle previously returned by CyDmaTdAlloc().
 998          *
 999          *  uint16 source:
1000          *   The lower 16 address bits of the source of the data transfer.
1001          *
1002          *  uint16 destination:
1003          *   The lower 16 address bits of the destination of the data transfer.
1004          *
1005          * Return:
1006          *  CYRET_SUCCESS if successful.
1007          *  CYRET_BAD_PARAM if tdHandle is invalid.
1008          *
1009          *******************************************************************************/
1010          cystatus CyDmaTdSetAddress(uint8 tdHandle, uint16 source, uint16 destination) 
1011          {
1012   1          cystatus status = CYRET_BAD_PARAM;
1013   1          reg16 *convert;
1014   1      
1015   1          if(tdHandle < CY_DMA_NUMBEROF_TDS)
1016   1          {
1017   2              /* Set source address */
1018   2              convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD1[0u];
1019   2              CY_SET_REG16(convert, source);
1020   2      
1021   2              /* Set destination address */
1022   2              convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD1[2u];
1023   2              CY_SET_REG16(convert, destination);
1024   2      
1025   2              status = CYRET_SUCCESS;
1026   2          }
1027   1      
1028   1          return(status);
1029   1      }
1030          
1031          
1032          /*******************************************************************************
1033          * Function Name: CyDmaTdGetAddress
1034          ********************************************************************************
1035          *
1036          * Summary:
1037          *  Retrieves the lower 16 bits of the source and/or destination addresses for
1038          *  this TD only. If NULL is passed for a pointer parameter, that value is
1039          *  skipped. You may request only the values of interest.
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 18  

1040          *
1041          * Parameters:
1042          *  uint8 tdHandle:
1043          *   A handle previously returned by CyDmaTdAlloc().
1044          *
1045          *  uint16 * source:
1046          *   The address to store the lower 16 address bits of the source of the data
1047          *   transfer.
1048          *
1049          *  uint16 * destination:
1050          *   The address to store the lower 16 address bits of the destination of the
1051          *   data transfer.
1052          *
1053          * Return:
1054          *  CYRET_SUCCESS if successful.
1055          *  CYRET_BAD_PARAM if tdHandle is invalid.
1056          *
1057          *******************************************************************************/
1058          cystatus CyDmaTdGetAddress(uint8 tdHandle, uint16 * source, uint16 * destination) 
1059          {
1060   1          cystatus status = CYRET_BAD_PARAM;
1061   1          reg16 *convert;
1062   1      
1063   1          if(tdHandle < CY_DMA_NUMBEROF_TDS)
1064   1          {
1065   2              /* If we have a pointer. */
1066   2              if(NULL != source)
1067   2              {
1068   3                  /* Get source address */
1069   3                  convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD1[0u];
1070   3                  *source = CY_GET_REG16(convert);
1071   3              }
1072   2      
1073   2              /* If we have a pointer. */
1074   2              if(NULL != destination)
1075   2              {
1076   3                  /* Get Destination address. */
1077   3                  convert = (reg16 *) &CY_DMA_TDMEM_STRUCT_PTR[tdHandle].TD1[2u];
1078   3                  *destination = CY_GET_REG16(convert);
1079   3              }
1080   2      
1081   2              status = CYRET_SUCCESS;
1082   2          }
1083   1      
1084   1          return(status);
1085   1      }
1086          
1087          
1088          /*******************************************************************************
1089          * Function Name: CyDmaChRoundRobin
1090          ********************************************************************************
1091          *
1092          * Summary:
1093          *  Either enables or disables the Round-Robin scheduling enforcement algorithm.
1094          *  Within a priority level a Round-Robin fairness algorithm is enforced.
1095          *
1096          * Parameters:
1097          *  uint8 chHandle:
1098          *   A handle previously returned by CyDmaChAlloc() or Dma_DmaInitialize().
1099          *
1100          *  uint8 enableRR:
1101          *   0: Disable Round-Robin fairness algorithm
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 19  

1102          *   1: Enable Round-Robin fairness algorithm
1103          *
1104          * Return:
1105          *  CYRET_SUCCESS if successful.
1106          *  CYRET_BAD_PARAM if chHandle is invalid.
1107          *
1108          *******************************************************************************/
1109          cystatus CyDmaChRoundRobin(uint8 chHandle, uint8 enableRR) 
1110          {
1111   1          cystatus status = CYRET_BAD_PARAM;
1112   1      
1113   1          if(chHandle < CY_DMA_NUMBEROF_CHANNELS)
1114   1          {
1115   2              if (0u != enableRR)
1116   2              {
1117   3                  CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] |= (uint8)CY_DMA_ROUND_ROBIN_ENABLE;
1118   3              }
1119   2              else
1120   2              {
1121   3                  CY_DMA_CH_STRUCT_PTR[chHandle].basic_cfg[0u] &= (uint8)(~CY_DMA_ROUND_ROBIN_ENABLE);
1122   3              }
1123   2      
1124   2              status = CYRET_SUCCESS;
1125   2          }
1126   1      
1127   1          return(status);
1128   1      }
1129          
1130          
1131          /* [] END OF FILE */
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 20  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyDmacConfigure (BEGIN)
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 62
                                           ; SOURCE LINE # 66
0000 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
0003 747F              MOV     A,#07FH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 67
0006 A3                INC     DPTR
0007 04                INC     A
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
0009 900000      R     MOV     DPTR,#dmaIndex
000C 14                DEC     A
000D F0                MOVX    @DPTR,A
000E         ?C0001:
000E 900000      R     MOV     DPTR,#dmaIndex
0011 E0                MOVX    A,@DPTR
0012 601B              JZ      ?C0002
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
0014 14                DEC     A
0015 FF                MOV     R7,A
0016 E0                MOVX    A,@DPTR
0017 75F008            MOV     B,#08H
001A A4                MUL     AB
001B 2400              ADD     A,#00H
001D F582              MOV     DPL,A
001F E5F0              MOV     A,B
0021 3478              ADDC    A,#078H
0023 F583              MOV     DPH,A
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
0027 900000      R     MOV     DPTR,#dmaIndex
002A E0                MOVX    A,@DPTR
002B 14                DEC     A
002C F0                MOVX    @DPTR,A
002D 80DF              SJMP    ?C0001
002F         ?C0002:
                                           ; SOURCE LINE # 76
002F 900000      R     MOV     DPTR,#dmaIndex
0032 E0                MOVX    A,@DPTR
0033 75F008            MOV     B,#08H
0036 A4                MUL     AB
0037 2400              ADD     A,#00H
0039 F582              MOV     DPL,A
003B E5F0              MOV     A,B
003D 3478              ADDC    A,#078H
003F F583              MOV     DPH,A
0041 E4                CLR     A
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0043 22                RET     
             ; FUNCTION CyDmacConfigure (END)

             ; FUNCTION CyDmacError (BEGIN)
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 21  

                                           ; SOURCE LINE # 111
0000 907004            MOV     DPTR,#07004H
0003 E0                MOVX    A,@DPTR
0004 FC                MOV     R4,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FD                MOV     R5,A
0008 A3                INC     DPTR
0009 E0                MOVX    A,@DPTR
000A FE                MOV     R6,A
000B A3                INC     DPTR
000C E0                MOVX    A,@DPTR
000D 540E              ANL     A,#0EH
000F FF                MOV     R7,A
0010 E4                CLR     A
                                           ; SOURCE LINE # 112
0011         ?C0005:
0011 22                RET     
             ; FUNCTION CyDmacError (END)

             ; FUNCTION _CyDmacClearError (BEGIN)
                                           ; SOURCE LINE # 145
0000 900000      R     MOV     DPTR,#error
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
0005 E0                MOVX    A,@DPTR
0006 FF                MOV     R7,A
0007 E4                CLR     A
0008 FC                MOV     R4,A
0009 FD                MOV     R5,A
000A FE                MOV     R6,A
000B EF                MOV     A,R7
000C 540F              ANL     A,#0FH
000E FF                MOV     R7,A
000F E4                CLR     A
0010 907004            MOV     DPTR,#07004H
0013 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 148
0016 22                RET     
             ; FUNCTION _CyDmacClearError (END)

             ; FUNCTION CyDmacErrorAddress (BEGIN)
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 171
0000 7B02              MOV     R3,#02H
0002 7A70              MOV     R2,#070H
0004 7908              MOV     R1,#08H
0006 120000      E     LCALL   _cyread32_nodpx
                                           ; SOURCE LINE # 172
0009         ?C0007:
0009 22                RET     
             ; FUNCTION CyDmacErrorAddress (END)

             ; FUNCTION CyDmaChAlloc (BEGIN)
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 195
0000 E4                CLR     A
0001 7F01              MOV     R7,#01H
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 22  

0003 FE                MOV     R6,A
0004 FD                MOV     R5,A
0005 FC                MOV     R4,A
0006 900000      R     MOV     DPTR,#channel
0009 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 199
000C 120000      E     LCALL   CyEnterCriticalSection
000F 900000      R     MOV     DPTR,#interruptState
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0014 E4                CLR     A
0015 A3                INC     DPTR
0016 F0                MOVX    @DPTR,A
0017         ?C0008:
0017 900000      R     MOV     DPTR,#dmaIndex
001A E0                MOVX    A,@DPTR
001B C3                CLR     C
001C 9418              SUBB    A,#018H
001E 4003              JC      $ + 5H
0020 020000      R     LJMP    ?C0009
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
0023 A3                INC     DPTR
0024 E0                MOVX    A,@DPTR
0025 FC                MOV     R4,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FD                MOV     R5,A
0029 A3                INC     DPTR
002A E0                MOVX    A,@DPTR
002B FE                MOV     R6,A
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 900000      R     MOV     DPTR,#CyDmaChannels
0032 E0                MOVX    A,@DPTR
0033 F8                MOV     R0,A
0034 A3                INC     DPTR
0035 E0                MOVX    A,@DPTR
0036 F9                MOV     R1,A
0037 A3                INC     DPTR
0038 E0                MOVX    A,@DPTR
0039 FA                MOV     R2,A
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C 5F                ANL     A,R7
003D FF                MOV     R7,A
003E EA                MOV     A,R2
003F 5E                ANL     A,R6
0040 FE                MOV     R6,A
0041 E9                MOV     A,R1
0042 5D                ANL     A,R5
0043 FD                MOV     R5,A
0044 E8                MOV     A,R0
0045 5C                ANL     A,R4
0046 FC                MOV     R4,A
0047 E4                CLR     A
0048 FB                MOV     R3,A
0049 FA                MOV     R2,A
004A F9                MOV     R1,A
004B F8                MOV     R0,A
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 23  

004C C3                CLR     C
004D 120000      E     LCALL   ?C?ULCMP
0050 7030              JNZ     ?C0011
                                           ; SOURCE LINE # 205
                                           ; SOURCE LINE # 207
0052 900000      R     MOV     DPTR,#CyDmaChannels
0055 E0                MOVX    A,@DPTR
0056 FC                MOV     R4,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 FD                MOV     R5,A
005A A3                INC     DPTR
005B E0                MOVX    A,@DPTR
005C FE                MOV     R6,A
005D A3                INC     DPTR
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 900000      R     MOV     DPTR,#channel
0063 E0                MOVX    A,@DPTR
0064 F8                MOV     R0,A
0065 A3                INC     DPTR
0066 E0                MOVX    A,@DPTR
0067 F9                MOV     R1,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A FA                MOV     R2,A
006B A3                INC     DPTR
006C E0                MOVX    A,@DPTR
006D FB                MOV     R3,A
006E EF                MOV     A,R7
006F 4B                ORL     A,R3
0070 FF                MOV     R7,A
0071 EE                MOV     A,R6
0072 4A                ORL     A,R2
0073 FE                MOV     R6,A
0074 ED                MOV     A,R5
0075 49                ORL     A,R1
0076 FD                MOV     R5,A
0077 EC                MOV     A,R4
0078 48                ORL     A,R0
0079 FC                MOV     R4,A
007A 900000      R     MOV     DPTR,#CyDmaChannels
007D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 208
0080 8022              SJMP    ?C0009
                                           ; SOURCE LINE # 209
0082         ?C0011:
                                           ; SOURCE LINE # 211
0082 900000      R     MOV     DPTR,#channel
0085 E0                MOVX    A,@DPTR
0086 FC                MOV     R4,A
0087 A3                INC     DPTR
0088 E0                MOVX    A,@DPTR
0089 FD                MOV     R5,A
008A A3                INC     DPTR
008B E0                MOVX    A,@DPTR
008C FE                MOV     R6,A
008D A3                INC     DPTR
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 7801              MOV     R0,#01H
0092 120000      E     LCALL   ?C?LSHL
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 24  

0095 900000      R     MOV     DPTR,#channel
0098 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 212
009B 900000      R     MOV     DPTR,#dmaIndex
009E E0                MOVX    A,@DPTR
009F 04                INC     A
00A0 F0                MOVX    @DPTR,A
00A1 020000      R     LJMP    ?C0008
00A4         ?C0009:
                                           ; SOURCE LINE # 214
00A4 900000      R     MOV     DPTR,#dmaIndex
00A7 E0                MOVX    A,@DPTR
00A8 C3                CLR     C
00A9 9418              SUBB    A,#018H
00AB 4003              JC      ?C0012
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
00AD 74FF              MOV     A,#0FFH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
00B0         ?C0012:
                                           ; SOURCE LINE # 220
00B0 900000      R     MOV     DPTR,#interruptState
00B3 E0                MOVX    A,@DPTR
00B4 FF                MOV     R7,A
00B5 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 222
00B8 900000      R     MOV     DPTR,#dmaIndex
00BB E0                MOVX    A,@DPTR
00BC FF                MOV     R7,A
                                           ; SOURCE LINE # 223
00BD         ?C0013:
00BD 22                RET     
             ; FUNCTION CyDmaChAlloc (END)

             ; FUNCTION _CyDmaChFree (BEGIN)
                                           ; SOURCE LINE # 242
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
0005 A3                INC     DPTR
0006 7401              MOV     A,#01H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0009 900000      R     MOV     DPTR,#chHandle
000C E0                MOVX    A,@DPTR
000D C3                CLR     C
000E 9418              SUBB    A,#018H
0010 505F              JNC     ?C0014
                                           ; SOURCE LINE # 248
                                           ; SOURCE LINE # 250
0012 120000      E     LCALL   CyEnterCriticalSection
0015 900000      R     MOV     DPTR,#interruptState
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
001A 900000      R     MOV     DPTR,#CyDmaChannels
001D E0                MOVX    A,@DPTR
001E FC                MOV     R4,A
001F A3                INC     DPTR
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 25  

0020 E0                MOVX    A,@DPTR
0021 FD                MOV     R5,A
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 C004              PUSH    AR4
002A C005              PUSH    AR5
002C C006              PUSH    AR6
002E C007              PUSH    AR7
0030 E4                CLR     A
0031 7F01              MOV     R7,#01H
0033 FE                MOV     R6,A
0034 FD                MOV     R5,A
0035 FC                MOV     R4,A
0036 900000      R     MOV     DPTR,#chHandle
0039 E0                MOVX    A,@DPTR
003A F9                MOV     R1,A
003B F8                MOV     R0,A
003C 120000      E     LCALL   ?C?LSHL
003F 120000      E     LCALL   ?C?LNOT
0042 A804              MOV     R0,AR4
0044 A905              MOV     R1,AR5
0046 AA06              MOV     R2,AR6
0048 AB07              MOV     R3,AR7
004A D007              POP     AR7
004C D006              POP     AR6
004E D005              POP     AR5
0050 D004              POP     AR4
0052 EF                MOV     A,R7
0053 5B                ANL     A,R3
0054 FF                MOV     R7,A
0055 EE                MOV     A,R6
0056 5A                ANL     A,R2
0057 FE                MOV     R6,A
0058 ED                MOV     A,R5
0059 59                ANL     A,R1
005A FD                MOV     R5,A
005B EC                MOV     A,R4
005C 58                ANL     A,R0
005D FC                MOV     R4,A
005E 900000      R     MOV     DPTR,#CyDmaChannels
0061 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 256
0064 900000      R     MOV     DPTR,#interruptState
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 257
006C E4                CLR     A
006D 900000      R     MOV     DPTR,#status
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0071         ?C0014:
                                           ; SOURCE LINE # 260
0071 900000      R     MOV     DPTR,#status
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
                                           ; SOURCE LINE # 261
0076         ?C0015:
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 26  

0076 22                RET     
             ; FUNCTION _CyDmaChFree (END)

             ; FUNCTION _CyDmaChEnable (BEGIN)
                                           ; SOURCE LINE # 304
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
0008 A3                INC     DPTR
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 308
000C 900000      R     MOV     DPTR,#chHandle
000F E0                MOVX    A,@DPTR
0010 C3                CLR     C
0011 9418              SUBB    A,#018H
0013 504D              JNC     ?C0016
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 6018              JZ      ?C0017
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 315
0019 900000      R     MOV     DPTR,#chHandle
001C E0                MOVX    A,@DPTR
001D 75F010            MOV     B,#010H
0020 A4                MUL     AB
0021 2410              ADD     A,#010H
0023 F582              MOV     DPL,A
0025 E5F0              MOV     A,B
0027 3470              ADDC    A,#070H
0029 F583              MOV     DPH,A
002B E0                MOVX    A,@DPTR
002C 4420              ORL     A,#020H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
002F 8016              SJMP    ?C0018
0031         ?C0017:
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 320
0031 900000      R     MOV     DPTR,#chHandle
0034 E0                MOVX    A,@DPTR
0035 75F010            MOV     B,#010H
0038 A4                MUL     AB
0039 2410              ADD     A,#010H
003B F582              MOV     DPL,A
003D E5F0              MOV     A,B
003F 3470              ADDC    A,#070H
0041 F583              MOV     DPH,A
0043 E0                MOVX    A,@DPTR
0044 54DF              ANL     A,#0DFH
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
0047         ?C0018:
                                           ; SOURCE LINE # 324
0047 900000      R     MOV     DPTR,#chHandle
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 27  

004A E0                MOVX    A,@DPTR
004B 75F010            MOV     B,#010H
004E A4                MUL     AB
004F 2410              ADD     A,#010H
0051 F582              MOV     DPL,A
0053 E5F0              MOV     A,B
0055 3470              ADDC    A,#070H
0057 F583              MOV     DPH,A
0059 E0                MOVX    A,@DPTR
005A 4401              ORL     A,#01H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
005D E4                CLR     A
005E 900000      R     MOV     DPTR,#status
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
0062         ?C0016:
                                           ; SOURCE LINE # 329
0062 900000      R     MOV     DPTR,#status
0065 E0                MOVX    A,@DPTR
0066 FF                MOV     R7,A
                                           ; SOURCE LINE # 330
0067         ?C0019:
0067 22                RET     
             ; FUNCTION _CyDmaChEnable (END)

             ; FUNCTION _CyDmaChDisable (BEGIN)
                                           ; SOURCE LINE # 354
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
0005 A3                INC     DPTR
0006 7401              MOV     A,#01H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
0009 900000      R     MOV     DPTR,#chHandle
000C E0                MOVX    A,@DPTR
000D C3                CLR     C
000E 9418              SUBB    A,#018H
0010 502E              JNC     ?C0020
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 366
0012 E0                MOVX    A,@DPTR
0013 75F010            MOV     B,#010H
0016 A4                MUL     AB
0017 2410              ADD     A,#010H
0019 F582              MOV     DPL,A
001B E5F0              MOV     A,B
001D 3470              ADDC    A,#070H
001F F583              MOV     DPH,A
0021 E0                MOVX    A,@DPTR
0022 54FE              ANL     A,#0FEH
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
0025 900000      R     MOV     DPTR,#chHandle
0028 E0                MOVX    A,@DPTR
0029 75F010            MOV     B,#010H
002C A4                MUL     AB
002D 2410              ADD     A,#010H
002F F582              MOV     DPL,A
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 28  

0031 E5F0              MOV     A,B
0033 3470              ADDC    A,#070H
0035 F583              MOV     DPH,A
0037 E0                MOVX    A,@DPTR
0038 54DF              ANL     A,#0DFH
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
003B E4                CLR     A
003C 900000      R     MOV     DPTR,#status
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
0040         ?C0020:
                                           ; SOURCE LINE # 373
0040 900000      R     MOV     DPTR,#status
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
                                           ; SOURCE LINE # 374
0045         ?C0021:
0045 22                RET     
             ; FUNCTION _CyDmaChDisable (END)

             ; FUNCTION _CyDmaClearPendingDrq (BEGIN)
                                           ; SOURCE LINE # 393
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
0005 A3                INC     DPTR
0006 7401              MOV     A,#01H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
0009 900000      R     MOV     DPTR,#chHandle
000C E0                MOVX    A,@DPTR
000D C3                CLR     C
000E 9418              SUBB    A,#018H
0010 502E              JNC     ?C0022
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0012 E0                MOVX    A,@DPTR
0013 75F010            MOV     B,#010H
0016 A4                MUL     AB
0017 2414              ADD     A,#014H
0019 F582              MOV     DPL,A
001B E5F0              MOV     A,B
001D 3470              ADDC    A,#070H
001F F583              MOV     DPH,A
0021 E0                MOVX    A,@DPTR
0022 4404              ORL     A,#04H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
0025 900000      R     MOV     DPTR,#chHandle
0028 E0                MOVX    A,@DPTR
0029 75F010            MOV     B,#010H
002C A4                MUL     AB
002D 2410              ADD     A,#010H
002F F582              MOV     DPL,A
0031 E5F0              MOV     A,B
0033 3470              ADDC    A,#070H
0035 F583              MOV     DPH,A
0037 E0                MOVX    A,@DPTR
0038 4401              ORL     A,#01H
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 29  

003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
003B E4                CLR     A
003C 900000      R     MOV     DPTR,#status
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
0040         ?C0022:
                                           ; SOURCE LINE # 404
0040 900000      R     MOV     DPTR,#status
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
                                           ; SOURCE LINE # 405
0045         ?C0023:
0045 22                RET     
             ; FUNCTION _CyDmaClearPendingDrq (END)

             ; FUNCTION _CyDmaChPriority (BEGIN)
                                           ; SOURCE LINE # 429
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 432
0008 900000      R     MOV     DPTR,#status
000B 7401              MOV     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
000E 900000      R     MOV     DPTR,#chHandle
0011 E0                MOVX    A,@DPTR
0012 C3                CLR     C
0013 9418              SUBB    A,#018H
0015 503E              JNC     ?C0024
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 436
0017 E0                MOVX    A,@DPTR
0018 75F010            MOV     B,#010H
001B A4                MUL     AB
001C 2410              ADD     A,#010H
001E F582              MOV     DPL,A
0020 E5F0              MOV     A,B
0022 3470              ADDC    A,#070H
0024 F583              MOV     DPH,A
0026 E0                MOVX    A,@DPTR
0027 54F1              ANL     A,#0F1H
0029 900000      R     MOV     DPTR,#value
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
002D 900000      R     MOV     DPTR,#priority
0030 E0                MOVX    A,@DPTR
0031 5407              ANL     A,#07H
0033 25E0              ADD     A,ACC
0035 FF                MOV     R7,A
0036 E4                CLR     A
0037 33                RLC     A
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
003A 4F                ORL     A,R7
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#chHandle
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 30  

003F E0                MOVX    A,@DPTR
0040 75F010            MOV     B,#010H
0043 A4                MUL     AB
0044 2410              ADD     A,#010H
0046 F582              MOV     DPL,A
0048 E5F0              MOV     A,B
004A 3470              ADDC    A,#070H
004C F583              MOV     DPH,A
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
0050 E4                CLR     A
0051 900000      R     MOV     DPTR,#status
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
0055         ?C0024:
                                           ; SOURCE LINE # 443
0055 900000      R     MOV     DPTR,#status
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
                                           ; SOURCE LINE # 444
005A         ?C0025:
005A 22                RET     
             ; FUNCTION _CyDmaChPriority (END)

             ; FUNCTION _CyDmaChSetExtendedAddress (BEGIN)
                                           ; SOURCE LINE # 470
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EA                MOV     A,R2
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EB                MOV     A,R3
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
0011 A3                INC     DPTR
0012 7401              MOV     A,#01H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
0015 900000      R     MOV     DPTR,#chHandle
0018 E0                MOVX    A,@DPTR
0019 C3                CLR     C
001A 9418              SUBB    A,#018H
001C 505C              JNC     ?C0026
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 495
001E E0                MOVX    A,@DPTR
001F 75F008            MOV     B,#08H
0022 A4                MUL     AB
0023 2404              ADD     A,#04H
0025 FF                MOV     R7,A
0026 E5F0              MOV     A,B
0028 3476              ADDC    A,#076H
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 31  

002A 900000      R     MOV     DPTR,#convert
002D F0                MOVX    @DPTR,A
002E A3                INC     DPTR
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 496
0031 900000      R     MOV     DPTR,#convert
0034 E0                MOVX    A,@DPTR
0035 FE                MOV     R6,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 AA06              MOV     R2,AR6
003A F9                MOV     R1,A
003B 7B01              MOV     R3,#01H
003D 900000      R     MOV     DPTR,#source
0040 E0                MOVX    A,@DPTR
0041 FC                MOV     R4,A
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 FD                MOV     R5,A
0045 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 499
0048 900000      R     MOV     DPTR,#chHandle
004B E0                MOVX    A,@DPTR
004C 75F008            MOV     B,#08H
004F A4                MUL     AB
0050 2406              ADD     A,#06H
0052 FF                MOV     R7,A
0053 E5F0              MOV     A,B
0055 3476              ADDC    A,#076H
0057 900000      R     MOV     DPTR,#convert
005A F0                MOVX    @DPTR,A
005B A3                INC     DPTR
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
005E 900000      R     MOV     DPTR,#convert
0061 E0                MOVX    A,@DPTR
0062 FE                MOV     R6,A
0063 A3                INC     DPTR
0064 E0                MOVX    A,@DPTR
0065 AA06              MOV     R2,AR6
0067 F9                MOV     R1,A
0068 7B01              MOV     R3,#01H
006A 900000      R     MOV     DPTR,#destination
006D E0                MOVX    A,@DPTR
006E FC                MOV     R4,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FD                MOV     R5,A
0072 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 501
0075 E4                CLR     A
0076 900000      R     MOV     DPTR,#status
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 502
007A         ?C0026:
                                           ; SOURCE LINE # 504
007A 900000      R     MOV     DPTR,#status
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
                                           ; SOURCE LINE # 505
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 32  

007F         ?C0027:
007F 22                RET     
             ; FUNCTION _CyDmaChSetExtendedAddress (END)

             ; FUNCTION _CyDmaChSetInitialTd (BEGIN)
                                           ; SOURCE LINE # 529
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 530
                                           ; SOURCE LINE # 531
0008 A3                INC     DPTR
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 533
000C 900000      R     MOV     DPTR,#chHandle
000F E0                MOVX    A,@DPTR
0010 C3                CLR     C
0011 9418              SUBB    A,#018H
0013 501C              JNC     ?C0028
                                           ; SOURCE LINE # 534
                                           ; SOURCE LINE # 535
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#chHandle
001B E0                MOVX    A,@DPTR
001C 75F010            MOV     B,#010H
001F A4                MUL     AB
0020 2419              ADD     A,#019H
0022 F582              MOV     DPL,A
0024 E5F0              MOV     A,B
0026 3470              ADDC    A,#070H
0028 F583              MOV     DPH,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 536
002C E4                CLR     A
002D 900000      R     MOV     DPTR,#status
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
0031         ?C0028:
                                           ; SOURCE LINE # 539
0031 900000      R     MOV     DPTR,#status
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
                                           ; SOURCE LINE # 540
0036         ?C0029:
0036 22                RET     
             ; FUNCTION _CyDmaChSetInitialTd (END)

             ; FUNCTION _CyDmaChSetRequest (BEGIN)
                                           ; SOURCE LINE # 567
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 33  

                                           ; SOURCE LINE # 568
                                           ; SOURCE LINE # 569
0008 A3                INC     DPTR
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 571
000C 900000      R     MOV     DPTR,#chHandle
000F E0                MOVX    A,@DPTR
0010 C3                CLR     C
0011 9418              SUBB    A,#018H
0013 5028              JNC     ?C0030
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
0015 E0                MOVX    A,@DPTR
0016 75F010            MOV     B,#010H
0019 A4                MUL     AB
001A 2414              ADD     A,#014H
001C F582              MOV     DPL,A
001E E5F0              MOV     A,B
0020 3470              ADDC    A,#070H
0022 F583              MOV     DPH,A
0024 C083              PUSH    DPH
0026 C082              PUSH    DPL
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 900000      R     MOV     DPTR,#request
002D E0                MOVX    A,@DPTR
002E 5407              ANL     A,#07H
0030 FE                MOV     R6,A
0031 EF                MOV     A,R7
0032 4E                ORL     A,R6
0033 D082              POP     DPL
0035 D083              POP     DPH
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
0038 E4                CLR     A
0039 900000      R     MOV     DPTR,#status
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 575
003D         ?C0030:
                                           ; SOURCE LINE # 577
003D 900000      R     MOV     DPTR,#status
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
                                           ; SOURCE LINE # 578
0042         ?C0031:
0042 22                RET     
             ; FUNCTION _CyDmaChSetRequest (END)

             ; FUNCTION _CyDmaChGetRequest (BEGIN)
                                           ; SOURCE LINE # 600
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 602
0005 A3                INC     DPTR
0006 74FF              MOV     A,#0FFH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
0009 900000      R     MOV     DPTR,#chHandle
000C E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 34  

000D C3                CLR     C
000E 9418              SUBB    A,#018H
0010 501C              JNC     ?C0032
                                           ; SOURCE LINE # 605
                                           ; SOURCE LINE # 607
0012 E0                MOVX    A,@DPTR
0013 75F010            MOV     B,#010H
0016 A4                MUL     AB
0017 2414              ADD     A,#014H
0019 F582              MOV     DPL,A
001B E5F0              MOV     A,B
001D 3470              ADDC    A,#070H
001F F583              MOV     DPH,A
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 E4                CLR     A
0024 EF                MOV     A,R7
0025 5407              ANL     A,#07H
0027 FF                MOV     R7,A
0028 E4                CLR     A
0029 900000      R     MOV     DPTR,#status
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 608
002E         ?C0032:
                                           ; SOURCE LINE # 610
002E 900000      R     MOV     DPTR,#status
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
                                           ; SOURCE LINE # 611
0033         ?C0033:
0033 22                RET     
             ; FUNCTION _CyDmaChGetRequest (END)

             ; FUNCTION _CyDmaChStatus (BEGIN)
                                           ; SOURCE LINE # 650
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EA                MOV     A,R2
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C E9                MOV     A,R1
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 652
000E 900000      R     MOV     DPTR,#status
0011 7401              MOV     A,#01H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
0014 900000      R     MOV     DPTR,#chHandle
0017 E0                MOVX    A,@DPTR
0018 C3                CLR     C
0019 9418              SUBB    A,#018H
001B 4003              JC      $ + 5H
001D 020000      R     LJMP    ?C0034
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 35  

0020 7B00              MOV     R3,#00H
0022 7A00              MOV     R2,#00H
0024 7900              MOV     R1,#00H
0026 C003              PUSH    AR3
0028 C002              PUSH    AR2
002A C001              PUSH    AR1
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FB                MOV     R3,A
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 FA                MOV     R2,A
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 F9                MOV     R1,A
0035 D082              POP     DPL
0037 D083              POP     DPH
0039 D0E0              POP     ACC
003B 6B                XRL     A,R3
003C 7008              JNZ     ?C0062
003E E9                MOV     A,R1
003F 6582              XRL     A,DPL
0041 7003              JNZ     ?C0062
0043 EA                MOV     A,R2
0044 6583              XRL     A,DPH
0046         ?C0062:
0046 6025              JZ      ?C0035
                                           ; SOURCE LINE # 657
                                           ; SOURCE LINE # 658
0048 900000      R     MOV     DPTR,#chHandle
004B E0                MOVX    A,@DPTR
004C 75F010            MOV     B,#010H
004F A4                MUL     AB
0050 2419              ADD     A,#019H
0052 F582              MOV     DPL,A
0054 E5F0              MOV     A,B
0056 3470              ADDC    A,#070H
0058 F583              MOV     DPH,A
005A E0                MOVX    A,@DPTR
005B 547F              ANL     A,#07FH
005D FF                MOV     R7,A
005E 900000      R     MOV     DPTR,#currentTd
0061 E0                MOVX    A,@DPTR
0062 FB                MOV     R3,A
0063 A3                INC     DPTR
0064 E0                MOVX    A,@DPTR
0065 FA                MOV     R2,A
0066 A3                INC     DPTR
0067 E0                MOVX    A,@DPTR
0068 F9                MOV     R1,A
0069 EF                MOV     A,R7
006A 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 659
006D         ?C0035:
                                           ; SOURCE LINE # 661
006D 7B00              MOV     R3,#00H
006F 7A00              MOV     R2,#00H
0071 7900              MOV     R1,#00H
0073 C003              PUSH    AR3
0075 C002              PUSH    AR2
0077 C001              PUSH    AR1
0079 900000      R     MOV     DPTR,#state
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 36  

007C E0                MOVX    A,@DPTR
007D FB                MOV     R3,A
007E A3                INC     DPTR
007F E0                MOVX    A,@DPTR
0080 FA                MOV     R2,A
0081 A3                INC     DPTR
0082 E0                MOVX    A,@DPTR
0083 F9                MOV     R1,A
0084 D082              POP     DPL
0086 D083              POP     DPH
0088 D0E0              POP     ACC
008A 6B                XRL     A,R3
008B 7008              JNZ     ?C0063
008D E9                MOV     A,R1
008E 6582              XRL     A,DPL
0090 7003              JNZ     ?C0063
0092 EA                MOV     A,R2
0093 6583              XRL     A,DPH
0095         ?C0063:
0095 6023              JZ      ?C0036
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 663
0097 900000      R     MOV     DPTR,#chHandle
009A E0                MOVX    A,@DPTR
009B 75F010            MOV     B,#010H
009E A4                MUL     AB
009F 2418              ADD     A,#018H
00A1 F582              MOV     DPL,A
00A3 E5F0              MOV     A,B
00A5 3470              ADDC    A,#070H
00A7 F583              MOV     DPH,A
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
00AB 900000      R     MOV     DPTR,#state
00AE E0                MOVX    A,@DPTR
00AF FB                MOV     R3,A
00B0 A3                INC     DPTR
00B1 E0                MOVX    A,@DPTR
00B2 FA                MOV     R2,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 F9                MOV     R1,A
00B6 EF                MOV     A,R7
00B7 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 664
00BA         ?C0036:
                                           ; SOURCE LINE # 666
00BA E4                CLR     A
00BB 900000      R     MOV     DPTR,#status
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 667
00BF         ?C0034:
                                           ; SOURCE LINE # 669
00BF 900000      R     MOV     DPTR,#status
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
                                           ; SOURCE LINE # 670
00C4         ?C0037:
00C4 22                RET     
             ; FUNCTION _CyDmaChStatus (END)

             ; FUNCTION _CyDmaChSetConfiguration (BEGIN)
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 37  

                                           ; SOURCE LINE # 716
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EB                MOV     A,R3
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 718
                                           ; SOURCE LINE # 719
000B 900000      R     MOV     DPTR,#status
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 721
0011 900000      R     MOV     DPTR,#chHandle
0014 E0                MOVX    A,@DPTR
0015 C3                CLR     C
0016 9418              SUBB    A,#018H
0018 4003              JC      $ + 5H
001A 020000      R     LJMP    ?C0038
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 723
001D 900000      R     MOV     DPTR,#requestPerBurst
0020 E0                MOVX    A,@DPTR
0021 5401              ANL     A,#01H
0023 75F080            MOV     B,#080H
0026 A4                MUL     AB
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#burstCount
002B E0                MOVX    A,@DPTR
002C 547F              ANL     A,#07FH
002E 4F                ORL     A,R7
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#chHandle
0033 E0                MOVX    A,@DPTR
0034 75F008            MOV     B,#08H
0037 A4                MUL     AB
0038 2400              ADD     A,#00H
003A F582              MOV     DPL,A
003C E5F0              MOV     A,B
003E 3476              ADDC    A,#076H
0040 F583              MOV     DPH,A
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
0044 900000      R     MOV     DPTR,#tdDone1
0047 E0                MOVX    A,@DPTR
0048 540F              ANL     A,#0FH
004A 75F010            MOV     B,#010H
004D A4                MUL     AB
004E FF                MOV     R7,A
004F 900000      R     MOV     DPTR,#tdDone0
0052 E0                MOVX    A,@DPTR
0053 540F              ANL     A,#0FH
0055 4F                ORL     A,R7
0056 FF                MOV     R7,A
0057 900000      R     MOV     DPTR,#chHandle
005A E0                MOVX    A,@DPTR
005B 75F008            MOV     B,#08H
005E A4                MUL     AB
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 38  

005F 2401              ADD     A,#01H
0061 F582              MOV     DPL,A
0063 E5F0              MOV     A,B
0065 3476              ADDC    A,#076H
0067 F583              MOV     DPH,A
0069 EF                MOV     A,R7
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 725
006B 900000      R     MOV     DPTR,#tdStop
006E E0                MOVX    A,@DPTR
006F 540F              ANL     A,#0FH
0071 FF                MOV     R7,A
0072 900000      R     MOV     DPTR,#chHandle
0075 E0                MOVX    A,@DPTR
0076 75F008            MOV     B,#08H
0079 A4                MUL     AB
007A 2402              ADD     A,#02H
007C F582              MOV     DPL,A
007E E5F0              MOV     A,B
0080 3476              ADDC    A,#076H
0082 F583              MOV     DPH,A
0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 726
0086 900000      R     MOV     DPTR,#chHandle
0089 E0                MOVX    A,@DPTR
008A 75F008            MOV     B,#08H
008D A4                MUL     AB
008E 2403              ADD     A,#03H
0090 F582              MOV     DPL,A
0092 E5F0              MOV     A,B
0094 3476              ADDC    A,#076H
0096 F583              MOV     DPH,A
0098 E4                CLR     A
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 728
009A 900000      R     MOV     DPTR,#status
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 729
009E         ?C0038:
                                           ; SOURCE LINE # 731
009E 900000      R     MOV     DPTR,#status
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
                                           ; SOURCE LINE # 732
00A3         ?C0039:
00A3 22                RET     
             ; FUNCTION _CyDmaChSetConfiguration (END)

             ; FUNCTION CyDmaTdAllocate (BEGIN)
                                           ; SOURCE LINE # 752
                                           ; SOURCE LINE # 753
                                           ; SOURCE LINE # 755
0000 900000      R     MOV     DPTR,#element
0003 74FF              MOV     A,#0FFH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 758
0006 120000      E     LCALL   CyEnterCriticalSection
0009 900000      R     MOV     DPTR,#interruptState
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 760
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 39  

000E 900000      R     MOV     DPTR,#CyDmaTdCurrentNumber
0011 E0                MOVX    A,@DPTR
0012 D3                SETB    C
0013 9418              SUBB    A,#018H
0015 4025              JC      ?C0040
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 763
0017 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
001A E0                MOVX    A,@DPTR
001B 900000      R     MOV     DPTR,#element
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 766
001F 900000      R     MOV     DPTR,#CyDmaTdCurrentNumber
0022 E0                MOVX    A,@DPTR
0023 14                DEC     A
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 769
0025 900000      R     MOV     DPTR,#element
0028 E0                MOVX    A,@DPTR
0029 75F008            MOV     B,#08H
002C A4                MUL     AB
002D 2400              ADD     A,#00H
002F F582              MOV     DPL,A
0031 E5F0              MOV     A,B
0033 3478              ADDC    A,#078H
0035 F583              MOV     DPH,A
0037 E0                MOVX    A,@DPTR
0038 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 770
003C         ?C0040:
                                           ; SOURCE LINE # 773
003C 900000      R     MOV     DPTR,#interruptState
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 775
0044 900000      R     MOV     DPTR,#element
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
                                           ; SOURCE LINE # 776
0049         ?C0041:
0049 22                RET     
             ; FUNCTION CyDmaTdAllocate (END)

             ; FUNCTION _CyDmaTdFree (BEGIN)
                                           ; SOURCE LINE # 794
0000 900000      R     MOV     DPTR,#tdHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 796
0005 E0                MOVX    A,@DPTR
0006 C3                CLR     C
0007 9480              SUBB    A,#080H
0009 5035              JNC     ?C0043
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 799
000B 120000      E     LCALL   CyEnterCriticalSection
000E 900000      R     MOV     DPTR,#interruptState
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 40  

                                           ; SOURCE LINE # 802
0013 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#tdHandle
001B E0                MOVX    A,@DPTR
001C 75F008            MOV     B,#08H
001F A4                MUL     AB
0020 2400              ADD     A,#00H
0022 F582              MOV     DPL,A
0024 E5F0              MOV     A,B
0026 3478              ADDC    A,#078H
0028 F583              MOV     DPH,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 805
002C 900000      R     MOV     DPTR,#tdHandle
002F E0                MOVX    A,@DPTR
0030 900000      R     MOV     DPTR,#CyDmaTdFreeIndex
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 808
0034 A3                INC     DPTR
0035 E0                MOVX    A,@DPTR
0036 04                INC     A
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 811
0038 900000      R     MOV     DPTR,#interruptState
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 813
0040         ?C0043:
0040 22                RET     
             ; FUNCTION _CyDmaTdFree (END)

             ; FUNCTION CyDmaTdFreeCount (BEGIN)
                                           ; SOURCE LINE # 830
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
0000 900000      R     MOV     DPTR,#CyDmaTdCurrentNumber
0003 E0                MOVX    A,@DPTR
0004 C3                CLR     C
0005 9418              SUBB    A,#018H
0007 FF                MOV     R7,A
                                           ; SOURCE LINE # 833
0008         ?C0044:
0008 22                RET     
             ; FUNCTION CyDmaTdFreeCount (END)

             ; FUNCTION _CyDmaTdSetConfiguration (BEGIN)
                                           ; SOURCE LINE # 891
0000 900000      R     MOV     DPTR,#tdHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 41  

000C EB                MOV     A,R3
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
000E 900000      R     MOV     DPTR,#status
0011 7401              MOV     A,#01H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 896
0014 900000      R     MOV     DPTR,#tdHandle
0017 E0                MOVX    A,@DPTR
0018 C3                CLR     C
0019 9480              SUBB    A,#080H
001B 506E              JNC     ?C0045
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F FE                MOV     R6,A
0020 A3                INC     DPTR
0021 E0                MOVX    A,@DPTR
0022 EE                MOV     A,R6
0023 54F0              ANL     A,#0F0H
0025 7064              JNZ     ?C0045
                                           ; SOURCE LINE # 897
                                           ; SOURCE LINE # 899
0027 900000      R     MOV     DPTR,#tdHandle
002A E0                MOVX    A,@DPTR
002B 75F008            MOV     B,#08H
002E A4                MUL     AB
002F 2400              ADD     A,#00H
0031 FF                MOV     R7,A
0032 E5F0              MOV     A,B
0034 3478              ADDC    A,#078H
0036 900000      R     MOV     DPTR,#convert
0039 F0                MOVX    @DPTR,A
003A A3                INC     DPTR
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 900
003D 900000      R     MOV     DPTR,#convert
0040 E0                MOVX    A,@DPTR
0041 FE                MOV     R6,A
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 AA06              MOV     R2,AR6
0046 F9                MOV     R1,A
0047 7B01              MOV     R3,#01H
0049 900000      R     MOV     DPTR,#transferCount
004C E0                MOVX    A,@DPTR
004D FC                MOV     R4,A
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 FD                MOV     R5,A
0051 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 903
0054 900000      R     MOV     DPTR,#nextTd
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 900000      R     MOV     DPTR,#tdHandle
005C E0                MOVX    A,@DPTR
005D 75F008            MOV     B,#08H
0060 A4                MUL     AB
0061 2402              ADD     A,#02H
0063 F582              MOV     DPL,A
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 42  

0065 E5F0              MOV     A,B
0067 3478              ADDC    A,#078H
0069 F583              MOV     DPH,A
006B EF                MOV     A,R7
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 906
006D 900000      R     MOV     DPTR,#configuration
0070 E0                MOVX    A,@DPTR
0071 FF                MOV     R7,A
0072 900000      R     MOV     DPTR,#tdHandle
0075 E0                MOVX    A,@DPTR
0076 75F008            MOV     B,#08H
0079 A4                MUL     AB
007A 2403              ADD     A,#03H
007C F582              MOV     DPL,A
007E E5F0              MOV     A,B
0080 3478              ADDC    A,#078H
0082 F583              MOV     DPH,A
0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 908
0086 E4                CLR     A
0087 900000      R     MOV     DPTR,#status
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 909
008B         ?C0045:
                                           ; SOURCE LINE # 911
008B 900000      R     MOV     DPTR,#status
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
                                           ; SOURCE LINE # 912
0090         ?C0046:
0090 22                RET     
             ; FUNCTION _CyDmaTdSetConfiguration (END)

             ; FUNCTION _CyDmaTdGetConfiguration (BEGIN)
                                           ; SOURCE LINE # 951
0000 900000      R     MOV     DPTR,#tdHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EA                MOV     A,R2
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C E9                MOV     A,R1
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 953
                                           ; SOURCE LINE # 954
000E 900000      R     MOV     DPTR,#status
0011 7401              MOV     A,#01H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 956
0014 900000      R     MOV     DPTR,#tdHandle
0017 E0                MOVX    A,@DPTR
0018 C3                CLR     C
0019 9480              SUBB    A,#080H
001B 4003              JC      $ + 5H
001D 020000      R     LJMP    ?C0047
                                           ; SOURCE LINE # 957
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 43  

                                           ; SOURCE LINE # 959
0020 7B00              MOV     R3,#00H
0022 7A00              MOV     R2,#00H
0024 7900              MOV     R1,#00H
0026 C003              PUSH    AR3
0028 C002              PUSH    AR2
002A C001              PUSH    AR1
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FB                MOV     R3,A
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 FA                MOV     R2,A
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 F9                MOV     R1,A
0035 D082              POP     DPL
0037 D083              POP     DPH
0039 D0E0              POP     ACC
003B 6B                XRL     A,R3
003C 7008              JNZ     ?C0064
003E E9                MOV     A,R1
003F 6582              XRL     A,DPL
0041 7003              JNZ     ?C0064
0043 EA                MOV     A,R2
0044 6583              XRL     A,DPH
0046         ?C0064:
0046 603A              JZ      ?C0048
                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 962
0048 900000      R     MOV     DPTR,#tdHandle
004B E0                MOVX    A,@DPTR
004C 75F008            MOV     B,#08H
004F A4                MUL     AB
0050 2400              ADD     A,#00H
0052 FF                MOV     R7,A
0053 E5F0              MOV     A,B
0055 3478              ADDC    A,#078H
0057 900000      R     MOV     DPTR,#convert
005A F0                MOVX    @DPTR,A
005B A3                INC     DPTR
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 963
005E 900000      R     MOV     DPTR,#convert
0061 E0                MOVX    A,@DPTR
0062 FE                MOV     R6,A
0063 A3                INC     DPTR
0064 E0                MOVX    A,@DPTR
0065 AA06              MOV     R2,AR6
0067 F9                MOV     R1,A
0068 7B01              MOV     R3,#01H
006A 120000      E     LCALL   _cyread16_nodpx
006D EE                MOV     A,R6
006E 540F              ANL     A,#0FH
0070 FE                MOV     R6,A
0071 900000      R     MOV     DPTR,#transferCount
0074 E0                MOVX    A,@DPTR
0075 FB                MOV     R3,A
0076 A3                INC     DPTR
0077 E0                MOVX    A,@DPTR
0078 FA                MOV     R2,A
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 44  

0079 A3                INC     DPTR
007A E0                MOVX    A,@DPTR
007B F9                MOV     R1,A
007C EE                MOV     A,R6
007D 8FF0              MOV     B,R7
007F 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 964
0082         ?C0048:
                                           ; SOURCE LINE # 967
0082 7B00              MOV     R3,#00H
0084 7A00              MOV     R2,#00H
0086 7900              MOV     R1,#00H
0088 C003              PUSH    AR3
008A C002              PUSH    AR2
008C C001              PUSH    AR1
008E 900000      R     MOV     DPTR,#nextTd
0091 E0                MOVX    A,@DPTR
0092 FB                MOV     R3,A
0093 A3                INC     DPTR
0094 E0                MOVX    A,@DPTR
0095 FA                MOV     R2,A
0096 A3                INC     DPTR
0097 E0                MOVX    A,@DPTR
0098 F9                MOV     R1,A
0099 D082              POP     DPL
009B D083              POP     DPH
009D D0E0              POP     ACC
009F 6B                XRL     A,R3
00A0 7008              JNZ     ?C0065
00A2 E9                MOV     A,R1
00A3 6582              XRL     A,DPL
00A5 7003              JNZ     ?C0065
00A7 EA                MOV     A,R2
00A8 6583              XRL     A,DPH
00AA         ?C0065:
00AA 6023              JZ      ?C0049
                                           ; SOURCE LINE # 968
                                           ; SOURCE LINE # 970
00AC 900000      R     MOV     DPTR,#tdHandle
00AF E0                MOVX    A,@DPTR
00B0 75F008            MOV     B,#08H
00B3 A4                MUL     AB
00B4 2402              ADD     A,#02H
00B6 F582              MOV     DPL,A
00B8 E5F0              MOV     A,B
00BA 3478              ADDC    A,#078H
00BC F583              MOV     DPH,A
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 900000      R     MOV     DPTR,#nextTd
00C3 E0                MOVX    A,@DPTR
00C4 FB                MOV     R3,A
00C5 A3                INC     DPTR
00C6 E0                MOVX    A,@DPTR
00C7 FA                MOV     R2,A
00C8 A3                INC     DPTR
00C9 E0                MOVX    A,@DPTR
00CA F9                MOV     R1,A
00CB EF                MOV     A,R7
00CC 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 971
00CF         ?C0049:
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 45  

                                           ; SOURCE LINE # 974
00CF 7B00              MOV     R3,#00H
00D1 7A00              MOV     R2,#00H
00D3 7900              MOV     R1,#00H
00D5 C003              PUSH    AR3
00D7 C002              PUSH    AR2
00D9 C001              PUSH    AR1
00DB 900000      R     MOV     DPTR,#configuration
00DE E0                MOVX    A,@DPTR
00DF FB                MOV     R3,A
00E0 A3                INC     DPTR
00E1 E0                MOVX    A,@DPTR
00E2 FA                MOV     R2,A
00E3 A3                INC     DPTR
00E4 E0                MOVX    A,@DPTR
00E5 F9                MOV     R1,A
00E6 D082              POP     DPL
00E8 D083              POP     DPH
00EA D0E0              POP     ACC
00EC 6B                XRL     A,R3
00ED 7008              JNZ     ?C0066
00EF E9                MOV     A,R1
00F0 6582              XRL     A,DPL
00F2 7003              JNZ     ?C0066
00F4 EA                MOV     A,R2
00F5 6583              XRL     A,DPH
00F7         ?C0066:
00F7 6023              JZ      ?C0050
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 977
00F9 900000      R     MOV     DPTR,#tdHandle
00FC E0                MOVX    A,@DPTR
00FD 75F008            MOV     B,#08H
0100 A4                MUL     AB
0101 2403              ADD     A,#03H
0103 F582              MOV     DPL,A
0105 E5F0              MOV     A,B
0107 3478              ADDC    A,#078H
0109 F583              MOV     DPH,A
010B E0                MOVX    A,@DPTR
010C FF                MOV     R7,A
010D 900000      R     MOV     DPTR,#configuration
0110 E0                MOVX    A,@DPTR
0111 FB                MOV     R3,A
0112 A3                INC     DPTR
0113 E0                MOVX    A,@DPTR
0114 FA                MOV     R2,A
0115 A3                INC     DPTR
0116 E0                MOVX    A,@DPTR
0117 F9                MOV     R1,A
0118 EF                MOV     A,R7
0119 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 978
011C         ?C0050:
                                           ; SOURCE LINE # 980
011C E4                CLR     A
011D 900000      R     MOV     DPTR,#status
0120 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 981
0121         ?C0047:
                                           ; SOURCE LINE # 983
0121 900000      R     MOV     DPTR,#status
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 46  

0124 E0                MOVX    A,@DPTR
0125 FF                MOV     R7,A
                                           ; SOURCE LINE # 984
0126         ?C0051:
0126 22                RET     
             ; FUNCTION _CyDmaTdGetConfiguration (END)

             ; FUNCTION _CyDmaTdSetAddress (BEGIN)
                                           ; SOURCE LINE # 1010
0000 900000      R     MOV     DPTR,#tdHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EC                MOV     A,R4
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C EA                MOV     A,R2
000D F0                MOVX    @DPTR,A
000E A3                INC     DPTR
000F EB                MOV     A,R3
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1012
0011 A3                INC     DPTR
0012 7401              MOV     A,#01H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1015
0015 900000      R     MOV     DPTR,#tdHandle
0018 E0                MOVX    A,@DPTR
0019 C3                CLR     C
001A 9480              SUBB    A,#080H
001C 505C              JNC     ?C0052
                                           ; SOURCE LINE # 1016
                                           ; SOURCE LINE # 1018
001E E0                MOVX    A,@DPTR
001F 75F008            MOV     B,#08H
0022 A4                MUL     AB
0023 2404              ADD     A,#04H
0025 FF                MOV     R7,A
0026 E5F0              MOV     A,B
0028 3478              ADDC    A,#078H
002A 900000      R     MOV     DPTR,#convert
002D F0                MOVX    @DPTR,A
002E A3                INC     DPTR
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1019
0031 900000      R     MOV     DPTR,#convert
0034 E0                MOVX    A,@DPTR
0035 FE                MOV     R6,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 AA06              MOV     R2,AR6
003A F9                MOV     R1,A
003B 7B01              MOV     R3,#01H
003D 900000      R     MOV     DPTR,#source
0040 E0                MOVX    A,@DPTR
0041 FC                MOV     R4,A
0042 A3                INC     DPTR
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 47  

0043 E0                MOVX    A,@DPTR
0044 FD                MOV     R5,A
0045 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 1022
0048 900000      R     MOV     DPTR,#tdHandle
004B E0                MOVX    A,@DPTR
004C 75F008            MOV     B,#08H
004F A4                MUL     AB
0050 2406              ADD     A,#06H
0052 FF                MOV     R7,A
0053 E5F0              MOV     A,B
0055 3478              ADDC    A,#078H
0057 900000      R     MOV     DPTR,#convert
005A F0                MOVX    @DPTR,A
005B A3                INC     DPTR
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1023
005E 900000      R     MOV     DPTR,#convert
0061 E0                MOVX    A,@DPTR
0062 FE                MOV     R6,A
0063 A3                INC     DPTR
0064 E0                MOVX    A,@DPTR
0065 AA06              MOV     R2,AR6
0067 F9                MOV     R1,A
0068 7B01              MOV     R3,#01H
006A 900000      R     MOV     DPTR,#destination
006D E0                MOVX    A,@DPTR
006E FC                MOV     R4,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 FD                MOV     R5,A
0072 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 1025
0075 E4                CLR     A
0076 900000      R     MOV     DPTR,#status
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1026
007A         ?C0052:
                                           ; SOURCE LINE # 1028
007A 900000      R     MOV     DPTR,#status
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
                                           ; SOURCE LINE # 1029
007F         ?C0053:
007F 22                RET     
             ; FUNCTION _CyDmaTdSetAddress (END)

             ; FUNCTION _CyDmaTdGetAddress (BEGIN)
                                           ; SOURCE LINE # 1058
0000 900000      R     MOV     DPTR,#tdHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EB                MOV     A,R3
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EA                MOV     A,R2
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C E9                MOV     A,R1
000D F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 48  

                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1060
000E 900000      R     MOV     DPTR,#status
0011 7401              MOV     A,#01H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1063
0014 900000      R     MOV     DPTR,#tdHandle
0017 E0                MOVX    A,@DPTR
0018 C3                CLR     C
0019 9480              SUBB    A,#080H
001B 4003              JC      $ + 5H
001D 020000      R     LJMP    ?C0054
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1066
0020 7B00              MOV     R3,#00H
0022 7A00              MOV     R2,#00H
0024 7900              MOV     R1,#00H
0026 C003              PUSH    AR3
0028 C002              PUSH    AR2
002A C001              PUSH    AR1
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FB                MOV     R3,A
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 FA                MOV     R2,A
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 F9                MOV     R1,A
0035 D082              POP     DPL
0037 D083              POP     DPH
0039 D0E0              POP     ACC
003B 6B                XRL     A,R3
003C 7008              JNZ     ?C0067
003E E9                MOV     A,R1
003F 6582              XRL     A,DPL
0041 7003              JNZ     ?C0067
0043 EA                MOV     A,R2
0044 6583              XRL     A,DPH
0046         ?C0067:
0046 6036              JZ      ?C0055
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1069
0048 900000      R     MOV     DPTR,#tdHandle
004B E0                MOVX    A,@DPTR
004C 75F008            MOV     B,#08H
004F A4                MUL     AB
0050 2404              ADD     A,#04H
0052 FF                MOV     R7,A
0053 E5F0              MOV     A,B
0055 3478              ADDC    A,#078H
0057 900000      R     MOV     DPTR,#convert
005A F0                MOVX    @DPTR,A
005B A3                INC     DPTR
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1070
005E 900000      R     MOV     DPTR,#convert
0061 E0                MOVX    A,@DPTR
0062 FE                MOV     R6,A
0063 A3                INC     DPTR
0064 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 49  

0065 AA06              MOV     R2,AR6
0067 F9                MOV     R1,A
0068 7B01              MOV     R3,#01H
006A 120000      E     LCALL   _cyread16_nodpx
006D 900000      R     MOV     DPTR,#source
0070 E0                MOVX    A,@DPTR
0071 FB                MOV     R3,A
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 FA                MOV     R2,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 F9                MOV     R1,A
0078 EE                MOV     A,R6
0079 8FF0              MOV     B,R7
007B 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 1071
007E         ?C0055:
                                           ; SOURCE LINE # 1074
007E 7B00              MOV     R3,#00H
0080 7A00              MOV     R2,#00H
0082 7900              MOV     R1,#00H
0084 C003              PUSH    AR3
0086 C002              PUSH    AR2
0088 C001              PUSH    AR1
008A 900000      R     MOV     DPTR,#destination
008D E0                MOVX    A,@DPTR
008E FB                MOV     R3,A
008F A3                INC     DPTR
0090 E0                MOVX    A,@DPTR
0091 FA                MOV     R2,A
0092 A3                INC     DPTR
0093 E0                MOVX    A,@DPTR
0094 F9                MOV     R1,A
0095 D082              POP     DPL
0097 D083              POP     DPH
0099 D0E0              POP     ACC
009B 6B                XRL     A,R3
009C 7008              JNZ     ?C0068
009E E9                MOV     A,R1
009F 6582              XRL     A,DPL
00A1 7003              JNZ     ?C0068
00A3 EA                MOV     A,R2
00A4 6583              XRL     A,DPH
00A6         ?C0068:
00A6 6036              JZ      ?C0056
                                           ; SOURCE LINE # 1075
                                           ; SOURCE LINE # 1077
00A8 900000      R     MOV     DPTR,#tdHandle
00AB E0                MOVX    A,@DPTR
00AC 75F008            MOV     B,#08H
00AF A4                MUL     AB
00B0 2406              ADD     A,#06H
00B2 FF                MOV     R7,A
00B3 E5F0              MOV     A,B
00B5 3478              ADDC    A,#078H
00B7 900000      R     MOV     DPTR,#convert
00BA F0                MOVX    @DPTR,A
00BB A3                INC     DPTR
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1078
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 50  

00BE 900000      R     MOV     DPTR,#convert
00C1 E0                MOVX    A,@DPTR
00C2 FE                MOV     R6,A
00C3 A3                INC     DPTR
00C4 E0                MOVX    A,@DPTR
00C5 AA06              MOV     R2,AR6
00C7 F9                MOV     R1,A
00C8 7B01              MOV     R3,#01H
00CA 120000      E     LCALL   _cyread16_nodpx
00CD 900000      R     MOV     DPTR,#destination
00D0 E0                MOVX    A,@DPTR
00D1 FB                MOV     R3,A
00D2 A3                INC     DPTR
00D3 E0                MOVX    A,@DPTR
00D4 FA                MOV     R2,A
00D5 A3                INC     DPTR
00D6 E0                MOVX    A,@DPTR
00D7 F9                MOV     R1,A
00D8 EE                MOV     A,R6
00D9 8FF0              MOV     B,R7
00DB 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 1079
00DE         ?C0056:
                                           ; SOURCE LINE # 1081
00DE E4                CLR     A
00DF 900000      R     MOV     DPTR,#status
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1082
00E3         ?C0054:
                                           ; SOURCE LINE # 1084
00E3 900000      R     MOV     DPTR,#status
00E6 E0                MOVX    A,@DPTR
00E7 FF                MOV     R7,A
                                           ; SOURCE LINE # 1085
00E8         ?C0057:
00E8 22                RET     
             ; FUNCTION _CyDmaTdGetAddress (END)

             ; FUNCTION _CyDmaChRoundRobin (BEGIN)
                                           ; SOURCE LINE # 1109
0000 900000      R     MOV     DPTR,#chHandle
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1111
0008 A3                INC     DPTR
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1113
000C 900000      R     MOV     DPTR,#chHandle
000F E0                MOVX    A,@DPTR
0010 C3                CLR     C
0011 9418              SUBB    A,#018H
0013 5037              JNC     ?C0058
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1115
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 6018              JZ      ?C0059
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 51  

                                           ; SOURCE LINE # 1116
                                           ; SOURCE LINE # 1117
0019 900000      R     MOV     DPTR,#chHandle
001C E0                MOVX    A,@DPTR
001D 75F010            MOV     B,#010H
0020 A4                MUL     AB
0021 2410              ADD     A,#010H
0023 F582              MOV     DPL,A
0025 E5F0              MOV     A,B
0027 3470              ADDC    A,#070H
0029 F583              MOV     DPH,A
002B E0                MOVX    A,@DPTR
002C 4410              ORL     A,#010H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1118
002F 8016              SJMP    ?C0060
0031         ?C0059:
                                           ; SOURCE LINE # 1120
                                           ; SOURCE LINE # 1121
0031 900000      R     MOV     DPTR,#chHandle
0034 E0                MOVX    A,@DPTR
0035 75F010            MOV     B,#010H
0038 A4                MUL     AB
0039 2410              ADD     A,#010H
003B F582              MOV     DPL,A
003D E5F0              MOV     A,B
003F 3470              ADDC    A,#070H
0041 F583              MOV     DPH,A
0043 E0                MOVX    A,@DPTR
0044 54EF              ANL     A,#0EFH
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
0047         ?C0060:
                                           ; SOURCE LINE # 1124
0047 E4                CLR     A
0048 900000      R     MOV     DPTR,#status
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1125
004C         ?C0058:
                                           ; SOURCE LINE # 1127
004C 900000      R     MOV     DPTR,#status
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
                                           ; SOURCE LINE # 1128
0051         ?C0061:
0051 22                RET     
             ; FUNCTION _CyDmaChRoundRobin (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2457    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6      99
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.51   CYDMAC                                                                10/31/2016 12:08:35 PAGE 52  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
