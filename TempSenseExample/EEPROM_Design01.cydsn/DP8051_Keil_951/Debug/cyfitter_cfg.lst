C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
NO OBJECT MODULE REQUESTED
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\3.3\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -.\Generated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2
                    -) PR(.\DP8051_Keil_951\Debug/cyfitter_cfg.lst) CD OT(3,SPEED) OJ(.\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

*** WARNING C500 IN LINE 1 OF .\Generated_Source\PSoC3\cyfitter_cfg.c: INCORRECT LICENSE ID CODE (LIC) IN 'TOOLS.INI'
   1          /*******************************************************************************
   2          * File Name: cyfitter_cfg.c
   3          * 
   4          * PSoC Creator  3.3 SP1
   5          *
   6          * Description:
   7          * This file contains device initialization code.
   8          * Except for the user defined sections in CyClockStartupError(), this file should not be modified.
   9          * This file is automatically generated by PSoC Creator.
  10          *
  11          ********************************************************************************
  12          * Copyright (c) 2007-2015 Cypress Semiconductor.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <string.h>
  19          #include "cytypes.h"
  20          #include "cydevice_trm.h"
  21          #include "cyfitter.h"
  22          #include "CyLib.h"
  23          #include "cyfitter_cfg.h"
  24          
  25          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  26          
  27          
  28          #if defined(__C51__) || defined(__CX51__)
  29                  #define CYPACKED
  30                  #define CYPACKED_ATTR
  31                  #define CYALIGNED
  32                  #define DMAINITSEC
  33              #define CY_CFG_UNUSED
  34                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  35          
  36          
  37          
  38                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  39                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  40                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  41          #else
                      #error Unsupported toolchain
              #endif
  44          
  45          
  46          
  47          /* Clock startup error codes                                                   */
  48          #define CYCLOCKSTART_NO_ERROR    0u
  49          #define CYCLOCKSTART_XTAL_ERROR  1u
  50          #define CYCLOCKSTART_32KHZ_ERROR 2u
  51          #define CYCLOCKSTART_PLL_ERROR   3u
  52          
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 2   

  53          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  54          /*******************************************************************************
  55          * Function Name: CyClockStartupError
  56          ********************************************************************************
  57          * Summary:
  58          *  If an error is encountered during clock configuration (crystal startup error,
  59          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  60          *  the customer, this function will stop in an infinite loop.
  61          *
  62          * Parameters:
  63          *   void
  64          *
  65          * Return:
  66          *   void
  67          *
  68          *******************************************************************************/
  69          CY_CFG_UNUSED
  70          static void CyClockStartupError(uint8 errorCode);
  71          CY_CFG_UNUSED
  72          static void CyClockStartupError(uint8 errorCode)
  73          {
  74   1          /* To remove the compiler warning if errorCode not used.                */
  75   1          errorCode = errorCode;
  76   1      
  77   1          /* `#START CyClockStartupError` */
  78   1      
  79   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc.),  */
  80   1          /* we will end up here to allow the customer to implement something to  */
  81   1          /* deal with the clock condition.                                       */
  82   1      
  83   1          /* `#END` */
  84   1      
  85   1          /* If nothing else, stop here since the clocks have not started         */
  86   1          /* correctly.                                                           */
  87   1          while(1) {}
  88   1      }
  89          #endif
  90          
  91          /* IOPORT_0 Address: CYDEV_PRTDSI_PRT0_BASE Size (bytes): 7 */
  92          #define BS_IOPORT_0_VAL ((const uint8 CYFAR *)0x00080000u)
  93          
  94          /* IOPINS0_0 Address: CYREG_PRT0_DR Size (bytes): 10 */
  95          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x00080008u)
  96          
  97          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
  98          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x00080014u)
  99          
 100          
 101          /*******************************************************************************
 102          * Function Name: cfg_dma_init
 103          ********************************************************************************
 104          * Summary:
 105          *  This function is used to copy device configuration data from constant values
 106          *  stored in memory into the proper chip configuration registers using DMA.  It
 107          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 108          *
 109          * Parameters:  
 110          *   void
 111          *
 112          * Return:
 113          *   void
 114          *
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 3   

 115          *******************************************************************************/
 116          static void cfg_dma_init(void);
 117          static void cfg_dma_init(void)
 118          {
 119   1              /* TD structure for big-endian systems. Requires 2-byte endian swap */
 120   1              CYPACKED struct td_t {
 121   1                      uint16 size;
 122   1                      uint8 flags;
 123   1                      uint8 next_td_ptr;
 124   1                      uint16 src;
 125   1                      uint16 dest;
 126   1              } CYPACKED_ATTR;
 127   1      
 128   1              /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 129   1              DMAINITSEC static const uint8 CYCODE CH1_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u
             -, 0x00u };
 130   1      
 131   1              /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 132   1              DMAINITSEC static const uint8 CYCODE CH2_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x01u
             -, 0x00u };
 133   1      
 134   1              /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 135   1              DMAINITSEC static const uint8 CYCODE CH5_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x00u
             -, 0x00u };
 136   1      
 137   1              /* Initialization data for each DMA channel's TD registers */
 138   1              DMAINITSEC static const uint8 CYCODE DMA_TD_START_CMD[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x01u };
 139   1      
 140   1              CYALIGNED static uint32 CYXDATA DMA_ZERO_VAL;
 141   1      
 142   1              /* This table holds all of the initialization data necessary for the DMA
 143   1                 process to transfer data from the source location to the destination. */
 144   1              DMAINITSEC static const struct td_t CYCODE CFG_TD_LIST0[] = {
 145   1                      /* Size, Flags, Next, Source, Destination */
 146   1                      { 8u, 0x23u, 0x02u, (uint16)(uint32)(CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },      /* TD 1 */
 147   1                      { 8u, 0x23u, 0x03u, (uint16)(uint32)(CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },      /* TD 2 */
 148   1                      { 8u, 0x23u, 0x04u, (uint16)(uint32)(CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },      /* TD 3 */
 149   1                      { 5u, 0x23u, 0x05u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },   /* TD 4 */
 150   1                      { 5u, 0x23u, 0x06u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },   /* TD 5 */
 151   1                      { 5u, 0x23u, 0xFEu, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },   /* TD 6 */
 152   1                      { 16u, 0x22u, 0x08u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT1_DR) },        /* TD 7 */
 153   1                      { 64u, 0x22u, 0x09u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT3_DR) },        /* TD 8 */
 154   1                      { 16u, 0x22u, 0x0Au, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT12_DR) },       /* TD 9 */
 155   1                      { 16u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT15_DR) },       /* TD 10 */
 156   1                      { 4095u, 0x22u, 0x0Cu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },   /* TD 11 *
             -/
 157   1                      { 1u, 0x22u, 0x0Du, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P7_ROUTE_BASE + 0x00000080u 
             -+ 0x7Fu) },        /* TD 12 */
 158   1                      { 2048u, 0x22u, 0x0Eu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },   /* TD 13 *
             -/
 159   1                      { 2560u, 0x22u, 0x0Fu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) },       /* TD 14 */
 160   1                      { 512u, 0x22u, 0x10u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },       /* TD 15 */
 161   1                      { 32u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) }, /* TD 16 */
 162   1                      { 7u, 0x23u, 0xFEu, (uint16)(uint32)(BS_IOPORT_0_VAL), (uint16)(CYDEV_PRTDSI_PRT0_BASE) },      /* TD 17 */
 163   1              };
 164   1      
 165   1              DMA_ZERO_VAL = 0u;
 166   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG0, 0x10u);    /* set burstcnt */
 167   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_CFG, 0x01u);   /* enable ch0 */
 168   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH0_BASIC_STATUS+1u), 0x00u);   /* set first TD to 0 */
 169   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD0, 17u*8u);       /* transfer size */
 170   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+2u), 0x01u);    /* set next TD to 1 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 4   

 171   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+3u), 0xA3u);    /* set TD flags */
 172   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD1, (uint16)((uint32)CFG_TD_LIST0 & 0x0000FFFFu)); /
             -* set td0's src addr */
 173   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD1+2u), CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst a
             -ddr */
 174   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG1, (uint16)(CYDEV_FLS_BASE >> 16));  /* set ch0's src h
             -igh addr */
 175   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_CFGMEM0_CFG1+2u), (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));     /* se
             -t ch0's dst high addr */
 176   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH1_BASIC_STATUS+1u), 0x07u);   /* ch1 first TD: 7 */
 177   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH2_BASIC_STATUS+1u), 0x0Bu);   /* ch2 first TD: 11 */
 178   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH5_BASIC_STATUS+1u), 0x11u);   /* ch5 first TD: 17 */
 179   1      
 180   1              CY_CFG_MEMORY_BARRIER();
 181   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_ACTION, 0x01u); /* cpu_req */
 182   1              CY_CFG_MEMORY_BARRIER();
 183   1      
 184   1              /* Wait for all DMA transfers to complete */
 185   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 186   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 187   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 188   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 189   1      
 190   1      
 191   1      }
 192          /*******************************************************************************
 193          * Function Name: ClockSetup
 194          ********************************************************************************
 195          *
 196          * Summary:
 197          *  Performs the initialization of all of the clocks in the device based on the
 198          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 199          *  clocks and setting the necessary dividers to produce the desired frequency. 
 200          *
 201          * Parameters:
 202          *  void
 203          *
 204          * Return:
 205          *  void
 206          *
 207          *******************************************************************************/
 208          static void ClockSetup(void);
 209          static void ClockSetup(void)
 210          {
 211   1              uint32 timeout;
 212   1              uint8 pllLock;
 213   1      
 214   1      
 215   1              /* Configure ILO based on settings from Clock DWR */
 216   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 217   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 218   1      
 219   1              /* Configure IMO based on settings from Clock DWR */
 220   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 221   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 222   1      
 223   1              /* Configure PLL based on settings from Clock DWR */
 224   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 225   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 226   1              /* Wait up to 250us for the PLL to lock */
 227   1              pllLock = 0u;
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 5   

 228   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 229   1              { 
 230   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 231   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 232   2              }
 233   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 234   1              if (timeout == 0u)
 235   1              {
 236   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 237   2              }
 238   1      
 239   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 240   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 241   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 242   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 243   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 244   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
 245   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 246   1      }
 247          
 248          
 249          /* Analog API Functions */
 250          
 251          
 252          /*******************************************************************************
 253          * Function Name: AnalogSetDefault
 254          ********************************************************************************
 255          *
 256          * Summary:
 257          *  Sets up the analog portions of the chip to default values based on chip
 258          *  configuration options from the project.
 259          *
 260          * Parameters:
 261          *  void
 262          *
 263          * Return:
 264          *  void
 265          *
 266          *******************************************************************************/
 267          static void AnalogSetDefault(void);
 268          static void AnalogSetDefault(void)
 269          {
 270   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 271   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 272   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 273   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 274   1      }
 275          
 276          
 277          /*******************************************************************************
 278          * Function Name: SetAnalogRoutingPumps
 279          ********************************************************************************
 280          *
 281          * Summary:
 282          * Enables or disables the analog pumps feeding analog routing switches.
 283          * Intended to be called at startup, based on the Vdda system configuration;
 284          * may be called during operation when the user informs us that the Vdda voltage
 285          * crossed the pump threshold.
 286          *
 287          * Parameters:
 288          *  enabled - 1 to enable the pumps, 0 to disable the pumps
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 6   

 289          *
 290          * Return:
 291          *  void
 292          *
 293          *******************************************************************************/
 294          void SetAnalogRoutingPumps(uint8 enabled)
 295          {
 296   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 297   1              if (enabled != 0u)
 298   1              {
 299   2                      regValue |= 0x00u;
 300   2              }
 301   1              else
 302   1              {
 303   2                      regValue &= (uint8)~0x00u;
 304   2              }
 305   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 306   1      }
 307          
 308          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 309          
 310          
 311          /*******************************************************************************
 312          * Function Name: cyfitter_cfg
 313          ********************************************************************************
 314          * Summary:
 315          *  This function is called by the start-up code for the selected device. It
 316          *  performs all of the necessary device configuration based on the design
 317          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 318          *  as Clocks and Pins as well as any component configuration that is necessary.
 319          *
 320          * Parameters:  
 321          *   void
 322          *
 323          * Return:
 324          *   void
 325          *
 326          *******************************************************************************/
 327          
 328          void cyfitter_cfg(void)
 329          {
 330   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 331   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 332   1      
 333   1              {
 334   2                      cfg_dma_init();
 335   2      
 336   2                      /* Enable digital routing */
 337   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 338   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 339   2      
 340   2                      /* Enable UDB array */
 341   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 342   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 343   2              }
 344   1      
 345   1      
 346   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 7   

             -egular configuration is done. */
 347   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DR), (const void CYFAR *)(BS_IOPINS0_0_VAL), 10u);
 348   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (const void CYFAR *)(BS_IOPINS0_2_VAL), 8u);
 349   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 350   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 351   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 352   1              {
 353   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 354   2              }
 355   1      
 356   1      
 357   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 358   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
 359   1              /* Setup clocks based on selections from Clock DWR */
 360   1              ClockSetup();
 361   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 362   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 363   1      
 364   1              CyEEPROM_Start(); /* Start EEPROM since it is used in DWR */
 365   1      
 366   1              /* Perform basic analog initialization to defaults */
 367   1              AnalogSetDefault();
 368   1      
 369   1              /* Configure alternate active mode */
 370   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 371   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 372   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 72
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 75
0005 E0                MOVX    A,@DPTR
0006 F0                MOVX    @DPTR,A
0007         ?C0001:
                                           ; SOURCE LINE # 87
0007 80FE              SJMP    ?C0001
0009 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
                                           ; SOURCE LINE # 165
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 FE                MOV     R6,A
0003 FD                MOV     R5,A
0004 FC                MOV     R4,A
0005 900000      R     MOV     DPTR,#DMA_ZERO_VAL
0008 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 166
000B 907600            MOV     DPTR,#07600H
000E 7410              MOV     A,#010H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
0011 907010            MOV     DPTR,#07010H
0014 7401              MOV     A,#01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 168
0017 907019            MOV     DPTR,#07019H
001A E4                CLR     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
001C 7B02              MOV     R3,#02H
001E 7A78              MOV     R2,#078H
0020 F9                MOV     R1,A
0021 7D88              MOV     R5,#088H
0023 FC                MOV     R4,A
0024 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 170
0027 907802            MOV     DPTR,#07802H
002A 7401              MOV     A,#01H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
002D A3                INC     DPTR
002E 74A3              MOV     A,#0A3H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
0031 7B02              MOV     R3,#02H
0033 7A78              MOV     R2,#078H
0035 7904              MOV     R1,#04H
0037 C003              PUSH    AR3
0039 C002              PUSH    AR2
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 9   

003B C001              PUSH    AR1
003D 7BFF              MOV     R3,#0FFH
003F 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0041 7900        R     MOV     R1,#LOW CFG_TD_LIST0
0043 E9                MOV     A,R1
0044 EA                MOV     A,R2
0045 E4                CLR     A
0046 AD01              MOV     R5,AR1
0048 AC02              MOV     R4,AR2
004A D001              POP     AR1
004C D002              POP     AR2
004E D003              POP     AR3
0050 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 173
0053 7B02              MOV     R3,#02H
0055 7A78              MOV     R2,#078H
0057 7906              MOV     R1,#06H
0059 7D08              MOV     R5,#08H
005B 7C78              MOV     R4,#078H
005D 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 174
0060 7B02              MOV     R3,#02H
0062 7A76              MOV     R2,#076H
0064 7904              MOV     R1,#04H
0066 7D10              MOV     R5,#010H
0068 7C00              MOV     R4,#00H
006A 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 175
006D 7B02              MOV     R3,#02H
006F 7A76              MOV     R2,#076H
0071 7906              MOV     R1,#06H
0073 E4                CLR     A
0074 FD                MOV     R5,A
0075 FC                MOV     R4,A
0076 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 176
0079 907029            MOV     DPTR,#07029H
007C 7407              MOV     A,#07H
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
007F 907039            MOV     DPTR,#07039H
0082 740B              MOV     A,#0BH
0084 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 178
0085 907069            MOV     DPTR,#07069H
0088 7411              MOV     A,#011H
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
008B 907014            MOV     DPTR,#07014H
008E 7401              MOV     A,#01H
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
0091         ?C0010:
                                           ; SOURCE LINE # 185
0091 907018            MOV     DPTR,#07018H
0094 E0                MOVX    A,@DPTR
0095 5401              ANL     A,#01H
0097 70F8              JNZ     ?C0010
0099         ?C0011:
0099         ?C0012:
                                           ; SOURCE LINE # 186
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 10  

0099 907028            MOV     DPTR,#07028H
009C E0                MOVX    A,@DPTR
009D 5401              ANL     A,#01H
009F 70F8              JNZ     ?C0012
00A1         ?C0013:
00A1         ?C0014:
                                           ; SOURCE LINE # 187
00A1 907038            MOV     DPTR,#07038H
00A4 E0                MOVX    A,@DPTR
00A5 5401              ANL     A,#01H
00A7 70F8              JNZ     ?C0014
00A9         ?C0015:
00A9         ?C0016:
                                           ; SOURCE LINE # 188
00A9 907068            MOV     DPTR,#07068H
00AC E0                MOVX    A,@DPTR
00AD 5401              ANL     A,#01H
00AF 70F8              JNZ     ?C0016
00B1         ?C0017:
                                           ; SOURCE LINE # 191
00B1         ?C0018:
00B1 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 209
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 216
0000 904300            MOV     DPTR,#04300H
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
0006 904000            MOV     DPTR,#04000H
0009 7408              MOV     A,#08H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 220
000C 904200            MOV     DPTR,#04200H
000F 7403              MOV     A,#03H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 221
0012 7B0C              MOV     R3,#0CH
0014 7A01              MOV     R2,#01H
0016 7908              MOV     R1,#08H
0018 120000      E     LCALL   _cyread8
001B 9046A1            MOV     DPTR,#046A1H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
0020 7B00              MOV     R3,#00H
0022 7A42              MOV     R2,#042H
0024 7922              MOV     R1,#022H
0026 7D08              MOV     R5,#08H
0028 7C00              MOV     R4,#00H
002A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 225
002D 7B00              MOV     R3,#00H
002F 7A42              MOV     R2,#042H
0031 7920              MOV     R1,#020H
0033 7D51              MOV     R5,#051H
0035 7C12              MOV     R4,#012H
0037 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 227
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 11  

003A E4                CLR     A
003B 900000      R     MOV     DPTR,#pllLock
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 228
003F 7F19              MOV     R7,#019H
0041 FE                MOV     R6,A
0042 FD                MOV     R5,A
0043 FC                MOV     R4,A
0044 900000      R     MOV     DPTR,#timeout
0047 120000      E     LCALL   ?C?LSTXDATA
004A         ?C0019:
004A 900000      R     MOV     DPTR,#timeout
004D E0                MOVX    A,@DPTR
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 FE                MOV     R6,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 D3                SETB    C
0056 9400              SUBB    A,#00H
0058 EE                MOV     A,R6
0059 9400              SUBB    A,#00H
005B 404A              JC      ?C0020
005D A3                INC     DPTR
005E E0                MOVX    A,@DPTR
005F 6403              XRL     A,#03H
0061 6044              JZ      ?C0020
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
0063 904225            MOV     DPTR,#04225H
0066 E0                MOVX    A,@DPTR
0067 5401              ANL     A,#01H
0069 FF                MOV     R7,A
006A 900000      R     MOV     DPTR,#pllLock
006D E0                MOVX    A,@DPTR
006E FE                MOV     R6,A
006F 25E0              ADD     A,ACC
0071 4F                ORL     A,R7
0072 5403              ANL     A,#03H
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 231
0075 E4                CLR     A
0076 7FE0              MOV     R7,#0E0H
0078 7E01              MOV     R6,#01H
007A FD                MOV     R5,A
007B FC                MOV     R4,A
007C 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 232
007F 900000      R     MOV     DPTR,#timeout
0082 E0                MOVX    A,@DPTR
0083 FC                MOV     R4,A
0084 A3                INC     DPTR
0085 E0                MOVX    A,@DPTR
0086 FD                MOV     R5,A
0087 A3                INC     DPTR
0088 E0                MOVX    A,@DPTR
0089 FE                MOV     R6,A
008A A3                INC     DPTR
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 12  

008D 74FF              MOV     A,#0FFH
008F EF                MOV     A,R7
0090 24FF              ADD     A,#0FFH
0092 FF                MOV     R7,A
0093 EE                MOV     A,R6
0094 34FF              ADDC    A,#0FFH
0096 FE                MOV     R6,A
0097 ED                MOV     A,R5
0098 34FF              ADDC    A,#0FFH
009A FD                MOV     R5,A
009B EC                MOV     A,R4
009C 34FF              ADDC    A,#0FFH
009E FC                MOV     R4,A
009F 900000      R     MOV     DPTR,#timeout
00A2 120000      E     LCALL   ?C?LSTXDATA
00A5 80A3              SJMP    ?C0019
00A7         ?C0020:
                                           ; SOURCE LINE # 234
00A7 900000      R     MOV     DPTR,#timeout
00AA E0                MOVX    A,@DPTR
00AB A3                INC     DPTR
00AC E0                MOVX    A,@DPTR
00AD A3                INC     DPTR
00AE E0                MOVX    A,@DPTR
00AF FE                MOV     R6,A
00B0 A3                INC     DPTR
00B1 E0                MOVX    A,@DPTR
00B2 4E                ORL     A,R6
00B3 7005              JNZ     ?C0022
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
00B5 7F03              MOV     R7,#03H
00B7 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 237
00BA         ?C0022:
                                           ; SOURCE LINE # 240
00BA 7B00              MOV     R3,#00H
00BC 7A40              MOV     R2,#040H
00BE 7904              MOV     R1,#04H
00C0 7D00              MOV     R5,#00H
00C2 7C01              MOV     R4,#01H
00C4 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 241
00C7 904004            MOV     DPTR,#04004H
00CA 7407              MOV     A,#07H
00CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 242
00CD 904006            MOV     DPTR,#04006H
00D0 E4                CLR     A
00D1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
00D2 904008            MOV     DPTR,#04008H
00D5 7448              MOV     A,#048H
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
00D8 904004            MOV     DPTR,#04004H
00DB E4                CLR     A
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
00DD 904001            MOV     DPTR,#04001H
00E0 7402              MOV     A,#02H
00E2 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 13  

                                           ; SOURCE LINE # 246
00E3 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 270
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 271
000E E0                MOVX    A,@DPTR
000F 5407              ANL     A,#07H
0011 90586E            MOV     DPTR,#0586EH
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
0015 900000      R     MOV     DPTR,#bg_xover_inl_trim
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A C4                SWAP    A
001B 540F              ANL     A,#0FH
001D 540F              ANL     A,#0FH
001F 90586F            MOV     DPTR,#0586FH
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
0023 905876            MOV     DPTR,#05876H
0026 7444              MOV     A,#044H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
0029 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 294
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 296
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 900000      R     MOV     DPTR,#regValue
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
000D 900000      R     MOV     DPTR,#enabled
0010 E0                MOVX    A,@DPTR
0011 6005              JZ      ?C0025
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 300
0016 8005              SJMP    ?C0026
0018         ?C0025:
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 14  

0018 900000      R     MOV     DPTR,#regValue
001B E0                MOVX    A,@DPTR
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 304
001D         ?C0026:
                                           ; SOURCE LINE # 305
001D 900000      R     MOV     DPTR,#regValue
0020 E0                MOVX    A,@DPTR
0021 905876            MOV     DPTR,#05876H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
0025 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
                                           ; SOURCE LINE # 331
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
0016 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 337
0019 7B01              MOV     R3,#01H
001B 7A50              MOV     R2,#050H
001D 7903              MOV     R1,#03H
001F 120000      E     LCALL   _cyread8
0022 EF                MOV     A,R7
0023 4402              ORL     A,#02H
0025 FD                MOV     R5,A
0026 7B01              MOV     R3,#01H
0028 7A50              MOV     R2,#050H
002A 7903              MOV     R1,#03H
002C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 338
002F 7B01              MOV     R3,#01H
0031 7A50              MOV     R2,#050H
0033 7913              MOV     R1,#013H
0035 120000      E     LCALL   _cyread8
0038 EF                MOV     A,R7
0039 4402              ORL     A,#02H
003B FD                MOV     R5,A
003C 7B01              MOV     R3,#01H
003E 7A50              MOV     R2,#050H
0040 7913              MOV     R1,#013H
0042 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 341
0045 9043A0            MOV     DPTR,#043A0H
0048 E0                MOVX    A,@DPTR
0049 4440              ORL     A,#040H
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 342
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 15  

004C 9043C2            MOV     DPTR,#043C2H
004F E0                MOVX    A,@DPTR
0050 4410              ORL     A,#010H
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 343
                                           ; SOURCE LINE # 347
0053 7B08              MOV     R3,#08H
0055 7A00              MOV     R2,#00H
0057 7908              MOV     R1,#08H
0059 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
005C E4                CLR     A
005D F0                MOVX    @DPTR,A
005E A3                INC     DPTR
005F 7451              MOV     A,#051H
0061 F0                MOVX    @DPTR,A
0062 A3                INC     DPTR
0063 E4                CLR     A
0064 F0                MOVX    @DPTR,A
0065 7F0A              MOV     R7,#0AH
0067 FE                MOV     R6,A
0068 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 348
006B 7B08              MOV     R3,#08H
006D 7A00              MOV     R2,#00H
006F 7914              MOV     R1,#014H
0071 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0074 E4                CLR     A
0075 F0                MOVX    @DPTR,A
0076 A3                INC     DPTR
0077 7451              MOV     A,#051H
0079 F0                MOVX    @DPTR,A
007A A3                INC     DPTR
007B 7422              MOV     A,#022H
007D F0                MOVX    @DPTR,A
007E 7F08              MOV     R7,#08H
0080 7E00              MOV     R6,#00H
0082 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 350
0085 904322            MOV     DPTR,#04322H
0088 E0                MOVX    A,@DPTR
0089 4408              ORL     A,#08H
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
008C 9046EC            MOV     DPTR,#046ECH
008F E0                MOVX    A,@DPTR
0090 C3                CLR     C
0091 9405              SUBB    A,#05H
0093 5006              JNC     ?C0028
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0095 904689            MOV     DPTR,#04689H
0098 743A              MOV     A,#03AH
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
009B         ?C0028:
                                           ; SOURCE LINE # 358
009B 904800            MOV     DPTR,#04800H
009E 74F1              MOV     A,#0F1H
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
00A1 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 362
C51 COMPILER V9.51   CYFITTER_CFG                                                          10/31/2016 12:08:33 PAGE 16  

00A4 904800            MOV     DPTR,#04800H
00A7 74B1              MOV     A,#0B1H
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
00AA 120000      E     LCALL   CyEEPROM_Start
                                           ; SOURCE LINE # 367
00AD 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 370
00B0 7B00              MOV     R3,#00H
00B2 7A43              MOV     R2,#043H
00B4 79A0              MOV     R1,#0A0H
00B6 C003              PUSH    AR3
00B8 C002              PUSH    AR2
00BA 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00BD EB                MOV     A,R3
00BE F0                MOVX    @DPTR,A
00BF A3                INC     DPTR
00C0 EA                MOV     A,R2
00C1 F0                MOVX    @DPTR,A
00C2 A3                INC     DPTR
00C3 74B0              MOV     A,#0B0H
00C5 F0                MOVX    @DPTR,A
00C6 D002              POP     AR2
00C8 D003              POP     AR3
00CA 7F0E              MOV     R7,#0EH
00CC 7E00              MOV     R6,#00H
00CE 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 371
00D1 9043B0            MOV     DPTR,#043B0H
00D4 E0                MOVX    A,@DPTR
00D5 54FD              ANL     A,#0FDH
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
00D8 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    713    ----
   CONSTANT SIZE    =    165    ----
   XDATA SIZE       =      4       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
